
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000497c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004b4c  08004b4c  00014b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c20  08004c20  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004c20  08004c20  00014c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c28  08004c28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004c30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006a24  20000078  08004ca8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006a9c  08004ca8  00026a9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8be  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e4  00000000  00000000  0002f966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  00032250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  000331d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016493  00000000  00000000  00034018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d5b  00000000  00000000  0004a4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bf1  00000000  00000000  0005b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1df7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000467c  00000000  00000000  000e1e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004b34 	.word	0x08004b34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004b34 	.word	0x08004b34

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fae1 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f845 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8af 	bl	8000684 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from task-1", 2, &task1_handle);
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	2302      	movs	r3, #2
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <main+0x80>)
 8000532:	22c8      	movs	r2, #200	; 0xc8
 8000534:	4918      	ldr	r1, [pc, #96]	; (8000598 <main+0x84>)
 8000536:	4819      	ldr	r0, [pc, #100]	; (800059c <main+0x88>)
 8000538:	f001 fff8 	bl	800252c <xTaskCreate>
 800053c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d00a      	beq.n	800055a <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000548:	f383 8811 	msr	BASEPRI, r3
 800054c:	f3bf 8f6f 	isb	sy
 8000550:	f3bf 8f4f 	dsb	sy
 8000554:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000556:	bf00      	nop
 8000558:	e7fe      	b.n	8000558 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from task-2", 2, &task2_handle);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2302      	movs	r3, #2
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0x8c>)
 8000564:	22c8      	movs	r2, #200	; 0xc8
 8000566:	490f      	ldr	r1, [pc, #60]	; (80005a4 <main+0x90>)
 8000568:	480f      	ldr	r0, [pc, #60]	; (80005a8 <main+0x94>)
 800056a:	f001 ffdf 	bl	800252c <xTaskCreate>
 800056e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d00a      	beq.n	800058c <main+0x78>
        __asm volatile
 8000576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800057a:	f383 8811 	msr	BASEPRI, r3
 800057e:	f3bf 8f6f 	isb	sy
 8000582:	f3bf 8f4f 	dsb	sy
 8000586:	60fb      	str	r3, [r7, #12]
    }
 8000588:	bf00      	nop
 800058a:	e7fe      	b.n	800058a <main+0x76>

  /* Start the FreeRTOS scheduler */
  vTaskStartScheduler();
 800058c:	f002 f93c 	bl	8002808 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x7c>
 8000592:	bf00      	nop
 8000594:	08004b4c 	.word	0x08004b4c
 8000598:	08004b64 	.word	0x08004b64
 800059c:	08000781 	.word	0x08000781
 80005a0:	08004b6c 	.word	0x08004b6c
 80005a4:	08004b84 	.word	0x08004b84
 80005a8:	080007a5 	.word	0x080007a5

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2234      	movs	r2, #52	; 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fda6 	bl	800410c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b29      	ldr	r3, [pc, #164]	; (800067c <SystemClock_Config+0xd0>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a28      	ldr	r2, [pc, #160]	; (800067c <SystemClock_Config+0xd0>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b26      	ldr	r3, [pc, #152]	; (800067c <SystemClock_Config+0xd0>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b23      	ldr	r3, [pc, #140]	; (8000680 <SystemClock_Config+0xd4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xd4>)
 80005f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xd4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800061c:	2310      	movs	r3, #16
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000626:	2304      	movs	r3, #4
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800062a:	2304      	movs	r3, #4
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4618      	mov	r0, r3
 8000638:	f000 ff42 	bl	80014c0 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000642:	f000 f8d3 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fcee 	bl	8001044 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800066e:	f000 f8bd 	bl	80007ec <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b35      	ldr	r3, [pc, #212]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b32      	ldr	r3, [pc, #200]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a2d      	ldr	r2, [pc, #180]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a26      	ldr	r2, [pc, #152]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_GPIO_Init+0xf0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <MX_GPIO_Init+0xf4>)
 8000710:	f000 fc7e 	bl	8001010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_GPIO_Init+0xf8>)
 800072c:	f000 fafc 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000730:	230c      	movs	r3, #12
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000740:	2307      	movs	r3, #7
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	480b      	ldr	r0, [pc, #44]	; (8000778 <MX_GPIO_Init+0xf4>)
 800074c:	f000 faec 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_GPIO_Init+0xf4>)
 8000768:	f000 fade 	bl	8000d28 <HAL_GPIO_Init>

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000
 800077c:	40020800 	.word	0x40020800

08000780 <task1_handler>:

/* USER CODE BEGIN 4 */
/* static is used to only use this function in this file (not possible to use out of here) */
static void task1_handler(void* parameters)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f003 fd35 	bl	80041f8 <puts>
		taskYIELD();
 800078e:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <task1_handler+0x20>)
 8000790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800079e:	e7f3      	b.n	8000788 <task1_handler+0x8>
 80007a0:	e000ed04 	.word	0xe000ed04

080007a4 <task2_handler>:
	}

}

static void task2_handler(void* parameters)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

	while(1)
	{
		printf("%s\n", (char*)parameters);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f003 fd23 	bl	80041f8 <puts>
		taskYIELD();
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <task2_handler+0x20>)
 80007b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	f3bf 8f4f 	dsb	sy
 80007be:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 80007c2:	e7f3      	b.n	80007ac <task2_handler+0x8>
 80007c4:	e000ed04 	.word	0xe000ed04

080007c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a04      	ldr	r2, [pc, #16]	; (80007e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d101      	bne.n	80007de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007da:	f000 f9a3 	bl	8000b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40001000 	.word	0x40001000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <Error_Handler+0x8>
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	2036      	movs	r0, #54	; 0x36
 800085e:	f000 fa39 	bl	8000cd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000862:	2036      	movs	r0, #54	; 0x36
 8000864:	f000 fa52 	bl	8000d0c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <HAL_InitTick+0xa4>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a1e      	ldr	r2, [pc, #120]	; (80008ec <HAL_InitTick+0xa4>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_InitTick+0xa4>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000884:	f107 0210 	add.w	r2, r7, #16
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fde4 	bl	800145c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000894:	f000 fdce 	bl	8001434 <HAL_RCC_GetPCLK1Freq>
 8000898:	4603      	mov	r3, r0
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a0:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <HAL_InitTick+0xa8>)
 80008a2:	fba2 2303 	umull	r2, r3, r2, r3
 80008a6:	0c9b      	lsrs	r3, r3, #18
 80008a8:	3b01      	subs	r3, #1
 80008aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_InitTick+0xac>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <HAL_InitTick+0xb0>)
 80008b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_InitTick+0xac>)
 80008b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008ba:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <HAL_InitTick+0xac>)
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <HAL_InitTick+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_InitTick+0xac>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <HAL_InitTick+0xac>)
 80008ce:	f001 f87b 	bl	80019c8 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d104      	bne.n	80008e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008d8:	4806      	ldr	r0, [pc, #24]	; (80008f4 <HAL_InitTick+0xac>)
 80008da:	f001 f8cf 	bl	8001a7c <HAL_TIM_Base_Start_IT>
 80008de:	4603      	mov	r3, r0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3730      	adds	r7, #48	; 0x30
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40023800 	.word	0x40023800
 80008f0:	431bde83 	.word	0x431bde83
 80008f4:	20000094 	.word	0x20000094
 80008f8:	40001000 	.word	0x40001000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC channel underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM6_DAC_IRQHandler+0x10>)
 800092e:	f001 f8f3 	bl	8001b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000094 	.word	0x20000094

0800093c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <ITM_SendChar+0x48>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <ITM_SendChar+0x48>)
 800094c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000950:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <ITM_SendChar+0x4c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <ITM_SendChar+0x4c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800095e:	bf00      	nop
 8000960:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f8      	beq.n	8000960 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800096e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	6013      	str	r3, [r2, #0]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000edfc 	.word	0xe000edfc
 8000988:	e0000e00 	.word	0xe0000e00

0800098c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	e00a      	b.n	80009b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800099e:	f3af 8000 	nop.w
 80009a2:	4601      	mov	r1, r0
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	60ba      	str	r2, [r7, #8]
 80009aa:	b2ca      	uxtb	r2, r1
 80009ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf0      	blt.n	800099e <_read+0x12>
	}

return len;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e009      	b.n	80009ec <_write+0x26>
	{
		// __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	1c5a      	adds	r2, r3, #1
 80009dc:	60ba      	str	r2, [r7, #8]
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffab 	bl	800093c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbf1      	blt.n	80009d8 <_write+0x12>
	}
	return len;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <_close>:

int _close(int file)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	return -1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a26:	605a      	str	r2, [r3, #4]
	return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <_isatty>:

int _isatty(int file)
{
 8000a36:	b480      	push	{r7}
 8000a38:	b083      	sub	sp, #12
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
	return 0;
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SystemInit+0x20>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a72:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <SystemInit+0x20>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a90:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a92:	490e      	ldr	r1, [pc, #56]	; (8000acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a94:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a98:	e002      	b.n	8000aa0 <LoopCopyDataInit>

08000a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9e:	3304      	adds	r3, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa4:	d3f9      	bcc.n	8000a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa6:	4a0b      	ldr	r2, [pc, #44]	; (8000ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aa8:	4c0b      	ldr	r4, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aac:	e001      	b.n	8000ab2 <LoopFillZerobss>

08000aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab0:	3204      	adds	r2, #4

08000ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab4:	d3fb      	bcc.n	8000aae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ab6:	f7ff ffd7 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aba:	f003 faf5 	bl	80040a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000abe:	f7ff fd29 	bl	8000514 <main>
  bx  lr    
 8000ac2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ac4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000acc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ad0:	08004c30 	.word	0x08004c30
  ldr r2, =_sbss
 8000ad4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ad8:	20006a9c 	.word	0x20006a9c

08000adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_Init+0x40>)
 8000aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_Init+0x40>)
 8000af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x40>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f8d8 	bl	8000cbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fe9a 	bl	8000848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fe70 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200000dc 	.word	0x200000dc

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200000dc 	.word	0x200000dc

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	; (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ff4c 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
 8000ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce6:	f7ff ff61 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000cea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	68b9      	ldr	r1, [r7, #8]
 8000cf0:	6978      	ldr	r0, [r7, #20]
 8000cf2:	f7ff ffb1 	bl	8000c58 <NVIC_EncodePriority>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff80 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff54 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e14d      	b.n	8000fe0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 813c 	bne.w	8000fda <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d017      	beq.n	8000e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d123      	bne.n	8000e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 8096 	beq.w	8000fda <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b51      	ldr	r3, [pc, #324]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a50      	ldr	r2, [pc, #320]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a4c      	ldr	r2, [pc, #304]	; (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a43      	ldr	r2, [pc, #268]	; (8001000 <HAL_GPIO_Init+0x2d8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x1ea>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <HAL_GPIO_Init+0x2dc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x1e6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a41      	ldr	r2, [pc, #260]	; (8001008 <HAL_GPIO_Init+0x2e0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x1e2>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x1ec>
 8000f12:	2300      	movs	r3, #0
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	f002 0203 	and.w	r2, r2, #3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4935      	ldr	r1, [pc, #212]	; (8000ffc <HAL_GPIO_Init+0x2d4>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f80:	4a22      	ldr	r2, [pc, #136]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f86:	4b21      	ldr	r3, [pc, #132]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_GPIO_Init+0x2e4>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	f67f aeae 	bls.w	8000d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40013800 	.word	0x40013800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020400 	.word	0x40020400
 8001008:	40020800 	.word	0x40020800
 800100c:	40013c00 	.word	0x40013c00

08001010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
 800101c:	4613      	mov	r3, r2
 800101e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001020:	787b      	ldrb	r3, [r7, #1]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800102c:	e003      	b.n	8001036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	041a      	lsls	r2, r3, #16
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	619a      	str	r2, [r3, #24]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	e0cc      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d90c      	bls.n	8001080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001066:	4b65      	ldr	r3, [pc, #404]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800106e:	4b63      	ldr	r3, [pc, #396]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0b8      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a58      	ldr	r2, [pc, #352]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b0:	4b53      	ldr	r3, [pc, #332]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4a52      	ldr	r2, [pc, #328]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010bc:	4b50      	ldr	r3, [pc, #320]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	494d      	ldr	r1, [pc, #308]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d044      	beq.n	8001164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d119      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e07f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d003      	beq.n	8001102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001102:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e06f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e067      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f023 0203 	bic.w	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4934      	ldr	r1, [pc, #208]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	4313      	orrs	r3, r2
 8001132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001134:	f7ff fd0a 	bl	8000b4c <HAL_GetTick>
 8001138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113a:	e00a      	b.n	8001152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800113c:	f7ff fd06 	bl	8000b4c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f241 3288 	movw	r2, #5000	; 0x1388
 800114a:	4293      	cmp	r3, r2
 800114c:	d901      	bls.n	8001152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e04f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 020c 	and.w	r2, r3, #12
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	429a      	cmp	r2, r3
 8001162:	d1eb      	bne.n	800113c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d20c      	bcs.n	800118c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001172:	4b22      	ldr	r3, [pc, #136]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e032      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	4916      	ldr	r1, [pc, #88]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	490e      	ldr	r1, [pc, #56]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ca:	f000 f821 	bl	8001210 <HAL_RCC_GetSysClockFreq>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	490a      	ldr	r1, [pc, #40]	; (8001204 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	5ccb      	ldrb	r3, [r1, r3]
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	4a09      	ldr	r2, [pc, #36]	; (8001208 <HAL_RCC_ClockConfig+0x1c4>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_RCC_ClockConfig+0x1c8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fb2c 	bl	8000848 <HAL_InitTick>

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023c00 	.word	0x40023c00
 8001200:	40023800 	.word	0x40023800
 8001204:	08004ba4 	.word	0x08004ba4
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001214:	b094      	sub	sp, #80	; 0x50
 8001216:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	647b      	str	r3, [r7, #68]	; 0x44
 800121c:	2300      	movs	r3, #0
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001220:	2300      	movs	r3, #0
 8001222:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001228:	4b79      	ldr	r3, [pc, #484]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d00d      	beq.n	8001250 <HAL_RCC_GetSysClockFreq+0x40>
 8001234:	2b08      	cmp	r3, #8
 8001236:	f200 80e1 	bhi.w	80013fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <HAL_RCC_GetSysClockFreq+0x34>
 800123e:	2b04      	cmp	r3, #4
 8001240:	d003      	beq.n	800124a <HAL_RCC_GetSysClockFreq+0x3a>
 8001242:	e0db      	b.n	80013fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001244:	4b73      	ldr	r3, [pc, #460]	; (8001414 <HAL_RCC_GetSysClockFreq+0x204>)
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001248:	e0db      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800124a:	4b73      	ldr	r3, [pc, #460]	; (8001418 <HAL_RCC_GetSysClockFreq+0x208>)
 800124c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800124e:	e0d8      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001258:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125a:	4b6d      	ldr	r3, [pc, #436]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	099b      	lsrs	r3, r3, #6
 800126c:	2200      	movs	r2, #0
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001270:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
 800127a:	2300      	movs	r3, #0
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
 800127e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001282:	4622      	mov	r2, r4
 8001284:	462b      	mov	r3, r5
 8001286:	f04f 0000 	mov.w	r0, #0
 800128a:	f04f 0100 	mov.w	r1, #0
 800128e:	0159      	lsls	r1, r3, #5
 8001290:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001294:	0150      	lsls	r0, r2, #5
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4621      	mov	r1, r4
 800129c:	1a51      	subs	r1, r2, r1
 800129e:	6139      	str	r1, [r7, #16]
 80012a0:	4629      	mov	r1, r5
 80012a2:	eb63 0301 	sbc.w	r3, r3, r1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012b4:	4659      	mov	r1, fp
 80012b6:	018b      	lsls	r3, r1, #6
 80012b8:	4651      	mov	r1, sl
 80012ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012be:	4651      	mov	r1, sl
 80012c0:	018a      	lsls	r2, r1, #6
 80012c2:	4651      	mov	r1, sl
 80012c4:	ebb2 0801 	subs.w	r8, r2, r1
 80012c8:	4659      	mov	r1, fp
 80012ca:	eb63 0901 	sbc.w	r9, r3, r1
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012e2:	4690      	mov	r8, r2
 80012e4:	4699      	mov	r9, r3
 80012e6:	4623      	mov	r3, r4
 80012e8:	eb18 0303 	adds.w	r3, r8, r3
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	462b      	mov	r3, r5
 80012f0:	eb49 0303 	adc.w	r3, r9, r3
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001302:	4629      	mov	r1, r5
 8001304:	024b      	lsls	r3, r1, #9
 8001306:	4621      	mov	r1, r4
 8001308:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800130c:	4621      	mov	r1, r4
 800130e:	024a      	lsls	r2, r1, #9
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001316:	2200      	movs	r2, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
 800131a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800131c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001320:	f7fe ff76 	bl	8000210 <__aeabi_uldivmod>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4613      	mov	r3, r2
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800132c:	e058      	b.n	80013e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	099b      	lsrs	r3, r3, #6
 8001334:	2200      	movs	r2, #0
 8001336:	4618      	mov	r0, r3
 8001338:	4611      	mov	r1, r2
 800133a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800133e:	623b      	str	r3, [r7, #32]
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
 8001344:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001348:	4642      	mov	r2, r8
 800134a:	464b      	mov	r3, r9
 800134c:	f04f 0000 	mov.w	r0, #0
 8001350:	f04f 0100 	mov.w	r1, #0
 8001354:	0159      	lsls	r1, r3, #5
 8001356:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800135a:	0150      	lsls	r0, r2, #5
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4641      	mov	r1, r8
 8001362:	ebb2 0a01 	subs.w	sl, r2, r1
 8001366:	4649      	mov	r1, r9
 8001368:	eb63 0b01 	sbc.w	fp, r3, r1
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	f04f 0300 	mov.w	r3, #0
 8001374:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001378:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800137c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001380:	ebb2 040a 	subs.w	r4, r2, sl
 8001384:	eb63 050b 	sbc.w	r5, r3, fp
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	00eb      	lsls	r3, r5, #3
 8001392:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001396:	00e2      	lsls	r2, r4, #3
 8001398:	4614      	mov	r4, r2
 800139a:	461d      	mov	r5, r3
 800139c:	4643      	mov	r3, r8
 800139e:	18e3      	adds	r3, r4, r3
 80013a0:	603b      	str	r3, [r7, #0]
 80013a2:	464b      	mov	r3, r9
 80013a4:	eb45 0303 	adc.w	r3, r5, r3
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013b6:	4629      	mov	r1, r5
 80013b8:	028b      	lsls	r3, r1, #10
 80013ba:	4621      	mov	r1, r4
 80013bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013c0:	4621      	mov	r1, r4
 80013c2:	028a      	lsls	r2, r1, #10
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ca:	2200      	movs	r2, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	61fa      	str	r2, [r7, #28]
 80013d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d4:	f7fe ff1c 	bl	8000210 <__aeabi_uldivmod>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4613      	mov	r3, r2
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_GetSysClockFreq+0x200>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	0c1b      	lsrs	r3, r3, #16
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	3301      	adds	r3, #1
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80013f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80013f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80013fa:	e002      	b.n	8001402 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_RCC_GetSysClockFreq+0x204>)
 80013fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001404:	4618      	mov	r0, r3
 8001406:	3750      	adds	r7, #80	; 0x50
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800
 8001414:	00f42400 	.word	0x00f42400
 8001418:	007a1200 	.word	0x007a1200

0800141c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_RCC_GetHCLKFreq+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000000 	.word	0x20000000

08001434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001438:	f7ff fff0 	bl	800141c <HAL_RCC_GetHCLKFreq>
 800143c:	4602      	mov	r2, r0
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	0a9b      	lsrs	r3, r3, #10
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	4903      	ldr	r1, [pc, #12]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800144a:	5ccb      	ldrb	r3, [r1, r3]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001450:	4618      	mov	r0, r3
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	08004bb4 	.word	0x08004bb4

0800145c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	220f      	movs	r2, #15
 800146a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_RCC_GetClockConfig+0x5c>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0203 	and.w	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_RCC_GetClockConfig+0x5c>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <HAL_RCC_GetClockConfig+0x60>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0207 	and.w	r2, r3, #7
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	601a      	str	r2, [r3, #0]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e273      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d075      	beq.n	80015ca <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014de:	4b88      	ldr	r3, [pc, #544]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d00c      	beq.n	8001504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b85      	ldr	r3, [pc, #532]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014f2:	2b08      	cmp	r3, #8
 80014f4:	d112      	bne.n	800151c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f6:	4b82      	ldr	r3, [pc, #520]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001502:	d10b      	bne.n	800151c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001504:	4b7e      	ldr	r3, [pc, #504]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d05b      	beq.n	80015c8 <HAL_RCC_OscConfig+0x108>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d157      	bne.n	80015c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e24e      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d106      	bne.n	8001534 <HAL_RCC_OscConfig+0x74>
 8001526:	4b76      	ldr	r3, [pc, #472]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a75      	ldr	r2, [pc, #468]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800152c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	e01d      	b.n	8001570 <HAL_RCC_OscConfig+0xb0>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x98>
 800153e:	4b70      	ldr	r3, [pc, #448]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6f      	ldr	r2, [pc, #444]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	4b6d      	ldr	r3, [pc, #436]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a6c      	ldr	r2, [pc, #432]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0xb0>
 8001558:	4b69      	ldr	r3, [pc, #420]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a68      	ldr	r2, [pc, #416]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800155e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b66      	ldr	r3, [pc, #408]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a65      	ldr	r2, [pc, #404]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800156a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d013      	beq.n	80015a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fae8 	bl	8000b4c <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fae4 	bl	8000b4c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	; 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e213      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001592:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f0      	beq.n	8001580 <HAL_RCC_OscConfig+0xc0>
 800159e:	e014      	b.n	80015ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fad4 	bl	8000b4c <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a8:	f7ff fad0 	bl	8000b4c <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b64      	cmp	r3, #100	; 0x64
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e1ff      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ba:	4b51      	ldr	r3, [pc, #324]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0xe8>
 80015c6:	e000      	b.n	80015ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d063      	beq.n	800169e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015d6:	4b4a      	ldr	r3, [pc, #296]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d11c      	bne.n	8001628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b44      	ldr	r3, [pc, #272]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d116      	bne.n	8001628 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x152>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d001      	beq.n	8001612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e1d3      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4937      	ldr	r1, [pc, #220]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	e03a      	b.n	800169e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d020      	beq.n	8001672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <HAL_RCC_OscConfig+0x244>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fa89 	bl	8000b4c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fa85 	bl	8000b4c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1b4      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001650:	4b2b      	ldr	r3, [pc, #172]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4925      	ldr	r1, [pc, #148]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 800166c:	4313      	orrs	r3, r2
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001672:	4b24      	ldr	r3, [pc, #144]	; (8001704 <HAL_RCC_OscConfig+0x244>)
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001678:	f7ff fa68 	bl	8000b4c <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001680:	f7ff fa64 	bl	8000b4c <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e193      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d036      	beq.n	8001718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d016      	beq.n	80016e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_RCC_OscConfig+0x248>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b8:	f7ff fa48 	bl	8000b4c <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff fa44 	bl	8000b4c <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e173      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_RCC_OscConfig+0x240>)
 80016d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x200>
 80016de:	e01b      	b.n	8001718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <HAL_RCC_OscConfig+0x248>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e6:	f7ff fa31 	bl	8000b4c <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	e00e      	b.n	800170c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ee:	f7ff fa2d 	bl	8000b4c <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d907      	bls.n	800170c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e15c      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
 8001700:	40023800 	.word	0x40023800
 8001704:	42470000 	.word	0x42470000
 8001708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	4b8a      	ldr	r3, [pc, #552]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 800170e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ea      	bne.n	80016ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 8097 	beq.w	8001854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800172a:	4b83      	ldr	r3, [pc, #524]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10f      	bne.n	8001756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	4b7f      	ldr	r3, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a7e      	ldr	r2, [pc, #504]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b7c      	ldr	r3, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001752:	2301      	movs	r3, #1
 8001754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001756:	4b79      	ldr	r3, [pc, #484]	; (800193c <HAL_RCC_OscConfig+0x47c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d118      	bne.n	8001794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001762:	4b76      	ldr	r3, [pc, #472]	; (800193c <HAL_RCC_OscConfig+0x47c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a75      	ldr	r2, [pc, #468]	; (800193c <HAL_RCC_OscConfig+0x47c>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176e:	f7ff f9ed 	bl	8000b4c <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff f9e9 	bl	8000b4c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e118      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001788:	4b6c      	ldr	r3, [pc, #432]	; (800193c <HAL_RCC_OscConfig+0x47c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x2ea>
 800179c:	4b66      	ldr	r3, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	4a65      	ldr	r2, [pc, #404]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	6713      	str	r3, [r2, #112]	; 0x70
 80017a8:	e01c      	b.n	80017e4 <HAL_RCC_OscConfig+0x324>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x30c>
 80017b2:	4b61      	ldr	r3, [pc, #388]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a60      	ldr	r2, [pc, #384]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
 80017be:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ca:	e00b      	b.n	80017e4 <HAL_RCC_OscConfig+0x324>
 80017cc:	4b5a      	ldr	r3, [pc, #360]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a59      	ldr	r2, [pc, #356]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
 80017d8:	4b57      	ldr	r3, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a56      	ldr	r2, [pc, #344]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80017de:	f023 0304 	bic.w	r3, r3, #4
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d015      	beq.n	8001818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f9ae 	bl	8000b4c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff f9aa 	bl	8000b4c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e0d7      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	4b4b      	ldr	r3, [pc, #300]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ee      	beq.n	80017f4 <HAL_RCC_OscConfig+0x334>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff f998 	bl	8000b4c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800181e:	e00a      	b.n	8001836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff f994 	bl	8000b4c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e0c1      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001836:	4b40      	ldr	r3, [pc, #256]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1ee      	bne.n	8001820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001842:	7dfb      	ldrb	r3, [r7, #23]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 800184e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 80ad 	beq.w	80019b8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800185e:	4b36      	ldr	r3, [pc, #216]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b08      	cmp	r3, #8
 8001868:	d060      	beq.n	800192c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d145      	bne.n	80018fe <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_RCC_OscConfig+0x480>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff f968 	bl	8000b4c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff f964 	bl	8000b4c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e093      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69da      	ldr	r2, [r3, #28]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	019b      	lsls	r3, r3, #6
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	085b      	lsrs	r3, r3, #1
 80018b6:	3b01      	subs	r3, #1
 80018b8:	041b      	lsls	r3, r3, #16
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	071b      	lsls	r3, r3, #28
 80018ca:	491b      	ldr	r1, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x480>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff f939 	bl	8000b4c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff f935 	bl	8000b4c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e064      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x41e>
 80018fc:	e05c      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_OscConfig+0x480>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f922 	bl	8000b4c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff f91e 	bl	8000b4c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e04d      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_OscConfig+0x478>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x44c>
 800192a:	e045      	b.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e040      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000
 8001940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <HAL_RCC_OscConfig+0x504>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d030      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d129      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d122      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800197a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197c:	4293      	cmp	r3, r2
 800197e:	d119      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	3b01      	subs	r3, #1
 800198e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d10f      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e041      	b.n	8001a5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d106      	bne.n	80019f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f839 	bl	8001a66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3304      	adds	r3, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f000 f9b6 	bl	8001d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d001      	beq.n	8001a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e035      	b.n	8001b00 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a16      	ldr	r2, [pc, #88]	; (8001b0c <HAL_TIM_Base_Start_IT+0x90>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_TIM_Base_Start_IT+0x4e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_TIM_Base_Start_IT+0x94>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d004      	beq.n	8001aca <HAL_TIM_Base_Start_IT+0x4e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_TIM_Base_Start_IT+0x98>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d111      	bne.n	8001aee <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b06      	cmp	r3, #6
 8001ada:	d010      	beq.n	8001afe <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aec:	e007      	b.n	8001afe <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f042 0201 	orr.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	40000c00 	.word	0x40000c00
 8001b14:	40014000 	.word	0x40014000

08001b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d122      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d11b      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0202 	mvn.w	r2, #2
 8001b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f8ee 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8e0 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f8f1 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d122      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0204 	mvn.w	r2, #4
 8001b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8c4 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f8b6 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8c7 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d122      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d11b      	bne.n	8001c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0208 	mvn.w	r2, #8
 8001bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f89a 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001c08:	e005      	b.n	8001c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 f88c 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f89d 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b10      	cmp	r3, #16
 8001c28:	d122      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d11b      	bne.n	8001c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f06f 0210 	mvn.w	r2, #16
 8001c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2208      	movs	r2, #8
 8001c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f870 	bl	8001d3c <HAL_TIM_IC_CaptureCallback>
 8001c5c:	e005      	b.n	8001c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 f862 	bl	8001d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f873 	bl	8001d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d10e      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d107      	bne.n	8001c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f06f 0201 	mvn.w	r2, #1
 8001c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fd96 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	2b80      	cmp	r3, #128	; 0x80
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb4:	2b80      	cmp	r3, #128	; 0x80
 8001cb6:	d107      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f8c0 	bl	8001e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd2:	2b40      	cmp	r3, #64	; 0x40
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d107      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f838 	bl	8001d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d10e      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d107      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0220 	mvn.w	r2, #32
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f88a 	bl	8001e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <TIM_Base_SetConfig+0xac>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d003      	beq.n	8001d98 <TIM_Base_SetConfig+0x20>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <TIM_Base_SetConfig+0xb0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d108      	bne.n	8001daa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <TIM_Base_SetConfig+0xac>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00b      	beq.n	8001dca <TIM_Base_SetConfig+0x52>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <TIM_Base_SetConfig+0xb0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <TIM_Base_SetConfig+0x52>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <TIM_Base_SetConfig+0xb4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d003      	beq.n	8001dca <TIM_Base_SetConfig+0x52>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <TIM_Base_SetConfig+0xb8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d108      	bne.n	8001ddc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <TIM_Base_SetConfig+0xac>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d103      	bne.n	8001e10 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	615a      	str	r2, [r3, #20]
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	40014000 	.word	0x40014000
 8001e30:	40014800 	.word	0x40014800

08001e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 0208 	add.w	r2, r3, #8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f103 0208 	add.w	r2, r3, #8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f103 0208 	add.w	r2, r3, #8
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b085      	sub	sp, #20
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d103      	bne.n	8001ed6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	e00c      	b.n	8001ef0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3308      	adds	r3, #8
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e002      	b.n	8001ee4 <vListInsert+0x2e>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d2f6      	bcs.n	8001ede <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6892      	ldr	r2, [r2, #8]
 8001f3e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6852      	ldr	r2, [r2, #4]
 8001f48:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d103      	bne.n	8001f5c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001f86:	2301      	movs	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <xQueueGenericReset+0x2e>
        __asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	60fb      	str	r3, [r7, #12]
    }
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d052      	beq.n	8002056 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d04e      	beq.n	8002056 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d000      	beq.n	8001fcc <xQueueGenericReset+0x50>
 8001fca:	2101      	movs	r1, #1
 8001fcc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d141      	bne.n	8002056 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8001fd2:	f001 fd89 	bl	8003ae8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	441a      	add	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	3b01      	subs	r3, #1
 8002004:	6939      	ldr	r1, [r7, #16]
 8002006:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	441a      	add	r2, r3
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	22ff      	movs	r2, #255	; 0xff
 800201e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00f      	beq.n	8002050 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	3310      	adds	r3, #16
 8002034:	4618      	mov	r0, r3
 8002036:	f000 feff 	bl	8002e38 <xTaskRemoveFromEventList>
 800203a:	e009      	b.n	8002050 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	3310      	adds	r3, #16
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff0b 	bl	8001e5c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	3324      	adds	r3, #36	; 0x24
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff06 	bl	8001e5c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002050:	f001 fd7a 	bl	8003b48 <vPortExitCritical>
 8002054:	e001      	b.n	800205a <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <xQueueGenericReset+0xfa>
        __asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	60bb      	str	r3, [r7, #8]
    }
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002076:	697b      	ldr	r3, [r7, #20]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af02      	add	r7, sp, #8
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d02e      	beq.n	80020f6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002098:	2100      	movs	r1, #0
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	fba3 2302 	umull	r2, r3, r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d000      	beq.n	80020a8 <xQueueGenericCreate+0x28>
 80020a6:	2101      	movs	r1, #1
 80020a8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d123      	bne.n	80020f6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68ba      	ldr	r2, [r7, #8]
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80020b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80020ba:	d81c      	bhi.n	80020f6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	3350      	adds	r3, #80	; 0x50
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 fdee 	bl	8003cac <pvPortMalloc>
 80020d0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d01c      	beq.n	8002112 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	3350      	adds	r3, #80	; 0x50
 80020e0:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f814 	bl	800211c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80020f4:	e00d      	b.n	8002112 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10a      	bne.n	8002112 <xQueueGenericCreate+0x92>
        __asm volatile
 80020fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002100:	f383 8811 	msr	BASEPRI, r3
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	613b      	str	r3, [r7, #16]
    }
 800210e:	bf00      	nop
 8002110:	e7fe      	b.n	8002110 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002112:	69fb      	ldr	r3, [r7, #28]
    }
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e002      	b.n	800213e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800214a:	2101      	movs	r1, #1
 800214c:	69b8      	ldr	r0, [r7, #24]
 800214e:	f7ff ff15 	bl	8001f7c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10a      	bne.n	8002194 <xQueueReceive+0x30>
        __asm volatile
 800217e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002182:	f383 8811 	msr	BASEPRI, r3
 8002186:	f3bf 8f6f 	isb	sy
 800218a:	f3bf 8f4f 	dsb	sy
 800218e:	623b      	str	r3, [r7, #32]
    }
 8002190:	bf00      	nop
 8002192:	e7fe      	b.n	8002192 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d103      	bne.n	80021a2 <xQueueReceive+0x3e>
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <xQueueReceive+0x42>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <xQueueReceive+0x44>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <xQueueReceive+0x5e>
        __asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	61fb      	str	r3, [r7, #28]
    }
 80021be:	bf00      	nop
 80021c0:	e7fe      	b.n	80021c0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021c2:	f001 f843 	bl	800324c <xTaskGetSchedulerState>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <xQueueReceive+0x6e>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <xQueueReceive+0x72>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <xQueueReceive+0x74>
 80021d6:	2300      	movs	r3, #0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <xQueueReceive+0x8e>
        __asm volatile
 80021dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	61bb      	str	r3, [r7, #24]
    }
 80021ee:	bf00      	nop
 80021f0:	e7fe      	b.n	80021f0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021f2:	f001 fc79 	bl	8003ae8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d014      	beq.n	800222c <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002206:	f000 f881 	bl	800230c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d004      	beq.n	8002224 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800221a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221c:	3310      	adds	r3, #16
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fe0a 	bl	8002e38 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002224:	f001 fc90 	bl	8003b48 <vPortExitCritical>
                return pdPASS;
 8002228:	2301      	movs	r3, #1
 800222a:	e069      	b.n	8002300 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d103      	bne.n	800223a <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002232:	f001 fc89 	bl	8003b48 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002236:	2300      	movs	r3, #0
 8002238:	e062      	b.n	8002300 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4618      	mov	r0, r3
 8002246:	f000 fecd 	bl	8002fe4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800224a:	2301      	movs	r3, #1
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800224e:	f001 fc7b 	bl	8003b48 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002252:	f000 fb2b 	bl	80028ac <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002256:	f001 fc47 	bl	8003ae8 <vPortEnterCritical>
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002260:	b25b      	sxtb	r3, r3
 8002262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002266:	d103      	bne.n	8002270 <xQueueReceive+0x10c>
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002276:	b25b      	sxtb	r3, r3
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d103      	bne.n	8002286 <xQueueReceive+0x122>
 800227e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002286:	f001 fc5f 	bl	8003b48 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800228a:	1d3a      	adds	r2, r7, #4
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f000 febc 	bl	8003010 <xTaskCheckForTimeOut>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d123      	bne.n	80022e6 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800229e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022a0:	f000 f8ac 	bl	80023fc <prvIsQueueEmpty>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d017      	beq.n	80022da <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ac:	3324      	adds	r3, #36	; 0x24
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4611      	mov	r1, r2
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fd56 	bl	8002d64 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80022b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ba:	f000 f84d 	bl	8002358 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80022be:	f000 fb03 	bl	80028c8 <xTaskResumeAll>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d194      	bne.n	80021f2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <xQueueReceive+0x1a4>)
 80022ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	f3bf 8f6f 	isb	sy
 80022d8:	e78b      	b.n	80021f2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80022da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022dc:	f000 f83c 	bl	8002358 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80022e0:	f000 faf2 	bl	80028c8 <xTaskResumeAll>
 80022e4:	e785      	b.n	80021f2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80022e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022e8:	f000 f836 	bl	8002358 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022ec:	f000 faec 	bl	80028c8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022f2:	f000 f883 	bl	80023fc <prvIsQueueEmpty>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f43f af7a 	beq.w	80021f2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80022fe:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002300:	4618      	mov	r0, r3
 8002302:	3730      	adds	r7, #48	; 0x30
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	e000ed04 	.word	0xe000ed04

0800230c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	441a      	add	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	429a      	cmp	r2, r3
 8002336:	d303      	bcc.n	8002340 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68d9      	ldr	r1, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	461a      	mov	r2, r3
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f001 fed0 	bl	80040f0 <memcpy>
    }
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002360:	f001 fbc2 	bl	8003ae8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800236a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800236c:	e011      	b.n	8002392 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3324      	adds	r3, #36	; 0x24
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fd5c 	bl	8002e38 <xTaskRemoveFromEventList>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002386:	f000 fea9 	bl	80030dc <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800238a:	7bfb      	ldrb	r3, [r7, #15]
 800238c:	3b01      	subs	r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	2b00      	cmp	r3, #0
 8002398:	dce9      	bgt.n	800236e <prvUnlockQueue+0x16>
 800239a:	e000      	b.n	800239e <prvUnlockQueue+0x46>
                        break;
 800239c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	22ff      	movs	r2, #255	; 0xff
 80023a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80023a6:	f001 fbcf 	bl	8003b48 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80023aa:	f001 fb9d 	bl	8003ae8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023b4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023b6:	e011      	b.n	80023dc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3310      	adds	r3, #16
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fd37 	bl	8002e38 <xTaskRemoveFromEventList>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80023d0:	f000 fe84 	bl	80030dc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	dce9      	bgt.n	80023b8 <prvUnlockQueue+0x60>
 80023e4:	e000      	b.n	80023e8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80023e6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	22ff      	movs	r2, #255	; 0xff
 80023ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80023f0:	f001 fbaa 	bl	8003b48 <vPortExitCritical>
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002404:	f001 fb70 	bl	8003ae8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002410:	2301      	movs	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	e001      	b.n	800241a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800241a:	f001 fb95 	bl	8003b48 <vPortExitCritical>

    return xReturn;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <vQueueAddToRegistry+0x26>
        __asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	60fb      	str	r3, [r7, #12]
    }
 800244a:	bf00      	nop
 800244c:	e7fe      	b.n	800244c <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d024      	beq.n	80024a2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e01e      	b.n	800249c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800245e:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <vQueueAddToRegistry+0x98>)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	429a      	cmp	r2, r3
 800246c:	d105      	bne.n	800247a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <vQueueAddToRegistry+0x98>)
 8002474:	4413      	add	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
                    break;
 8002478:	e013      	b.n	80024a2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <vQueueAddToRegistry+0x6e>
 8002480:	4a0f      	ldr	r2, [pc, #60]	; (80024c0 <vQueueAddToRegistry+0x98>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <vQueueAddToRegistry+0x98>)
 8002492:	4413      	add	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	3301      	adds	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b07      	cmp	r3, #7
 80024a0:	d9dd      	bls.n	800245e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80024b4:	bf00      	nop
 80024b6:	371c      	adds	r7, #28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	200000e0 	.word	0x200000e0

080024c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80024d4:	f001 fb08 	bl	8003ae8 <vPortEnterCritical>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024de:	b25b      	sxtb	r3, r3
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d103      	bne.n	80024ee <vQueueWaitForMessageRestricted+0x2a>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024f4:	b25b      	sxtb	r3, r3
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d103      	bne.n	8002504 <vQueueWaitForMessageRestricted+0x40>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002504:	f001 fb20 	bl	8003b48 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250c:	2b00      	cmp	r3, #0
 800250e:	d106      	bne.n	800251e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	3324      	adds	r3, #36	; 0x24
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68b9      	ldr	r1, [r7, #8]
 8002518:	4618      	mov	r0, r3
 800251a:	f000 fc47 	bl	8002dac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800251e:	6978      	ldr	r0, [r7, #20]
 8002520:	f7ff ff1a 	bl	8002358 <prvUnlockQueue>
    }
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af04      	add	r7, sp, #16
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4618      	mov	r0, r3
 8002542:	f001 fbb3 	bl	8003cac <pvPortMalloc>
 8002546:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00e      	beq.n	800256c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800254e:	2058      	movs	r0, #88	; 0x58
 8002550:	f001 fbac 	bl	8003cac <pvPortMalloc>
 8002554:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
 8002562:	e005      	b.n	8002570 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f001 fc81 	bl	8003e6c <vPortFree>
 800256a:	e001      	b.n	8002570 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002576:	88fa      	ldrh	r2, [r7, #6]
 8002578:	2300      	movs	r3, #0
 800257a:	9303      	str	r3, [sp, #12]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	9302      	str	r3, [sp, #8]
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f80e 	bl	80025ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002592:	69f8      	ldr	r0, [r7, #28]
 8002594:	f000 f8b0 	bl	80026f8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002598:	2301      	movs	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	e002      	b.n	80025a4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80025a4:	69bb      	ldr	r3, [r7, #24]
    }
 80025a6:	4618      	mov	r0, r3
 80025a8:	3720      	adds	r7, #32
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b088      	sub	sp, #32
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	461a      	mov	r2, r3
 80025c6:	21a5      	movs	r1, #165	; 0xa5
 80025c8:	f001 fda0 	bl	800410c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025d6:	3b01      	subs	r3, #1
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f023 0307 	bic.w	r3, r3, #7
 80025e4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <prvInitialiseNewTask+0x58>
        __asm volatile
 80025f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f4:	f383 8811 	msr	BASEPRI, r3
 80025f8:	f3bf 8f6f 	isb	sy
 80025fc:	f3bf 8f4f 	dsb	sy
 8002600:	617b      	str	r3, [r7, #20]
    }
 8002602:	bf00      	nop
 8002604:	e7fe      	b.n	8002604 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d01f      	beq.n	800264c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800260c:	2300      	movs	r3, #0
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	e012      	b.n	8002638 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	7819      	ldrb	r1, [r3, #0]
 800261a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	3334      	adds	r3, #52	; 0x34
 8002622:	460a      	mov	r2, r1
 8002624:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	4413      	add	r3, r2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3301      	adds	r3, #1
 8002636:	61fb      	str	r3, [r7, #28]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	2b09      	cmp	r3, #9
 800263c:	d9e9      	bls.n	8002612 <prvInitialiseNewTask+0x64>
 800263e:	e000      	b.n	8002642 <prvInitialiseNewTask+0x94>
            {
                break;
 8002640:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800264a:	e003      	b.n	8002654 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	2b04      	cmp	r3, #4
 8002658:	d90a      	bls.n	8002670 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	613b      	str	r3, [r7, #16]
    }
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	2b04      	cmp	r3, #4
 8002674:	d901      	bls.n	800267a <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002676:	2304      	movs	r3, #4
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002684:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	2200      	movs	r2, #0
 800268a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	3304      	adds	r3, #4
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fc03 	bl	8001e9c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	3318      	adds	r3, #24
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbfe 	bl	8001e9c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	f1c3 0205 	rsb	r2, r3, #5
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	3350      	adds	r3, #80	; 0x50
 80026ba:	2204      	movs	r2, #4
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 fd24 	bl	800410c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	3354      	adds	r3, #84	; 0x54
 80026c8:	2201      	movs	r2, #1
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 fd1d 	bl	800410c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	69b8      	ldr	r0, [r7, #24]
 80026d8:	f001 f8da 	bl	8003890 <pxPortInitialiseStack>
 80026dc:	4602      	mov	r2, r0
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026ee:	bf00      	nop
 80026f0:	3720      	adds	r7, #32
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
	...

080026f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002700:	f001 f9f2 	bl	8003ae8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002704:	4b3a      	ldr	r3, [pc, #232]	; (80027f0 <prvAddNewTaskToReadyList+0xf8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	4a39      	ldr	r2, [pc, #228]	; (80027f0 <prvAddNewTaskToReadyList+0xf8>)
 800270c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <prvAddNewTaskToReadyList+0xfc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002716:	4a37      	ldr	r2, [pc, #220]	; (80027f4 <prvAddNewTaskToReadyList+0xfc>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800271c:	4b34      	ldr	r3, [pc, #208]	; (80027f0 <prvAddNewTaskToReadyList+0xf8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d110      	bne.n	8002746 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002724:	f000 fcf8 	bl	8003118 <prvInitialiseTaskLists>
 8002728:	e00d      	b.n	8002746 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800272a:	4b33      	ldr	r3, [pc, #204]	; (80027f8 <prvAddNewTaskToReadyList+0x100>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002732:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <prvAddNewTaskToReadyList+0xfc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	429a      	cmp	r2, r3
 800273e:	d802      	bhi.n	8002746 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002740:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <prvAddNewTaskToReadyList+0xfc>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002746:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <prvAddNewTaskToReadyList+0x104>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	4a2b      	ldr	r2, [pc, #172]	; (80027fc <prvAddNewTaskToReadyList+0x104>)
 800274e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <prvAddNewTaskToReadyList+0x104>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <prvAddNewTaskToReadyList+0x108>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4313      	orrs	r3, r2
 8002766:	4a26      	ldr	r2, [pc, #152]	; (8002800 <prvAddNewTaskToReadyList+0x108>)
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276e:	4925      	ldr	r1, [pc, #148]	; (8002804 <prvAddNewTaskToReadyList+0x10c>)
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3304      	adds	r3, #4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	3204      	adds	r2, #4
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	1d1a      	adds	r2, r3, #4
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <prvAddNewTaskToReadyList+0x10c>)
 80027ae:	441a      	add	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	615a      	str	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	4912      	ldr	r1, [pc, #72]	; (8002804 <prvAddNewTaskToReadyList+0x10c>)
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	480e      	ldr	r0, [pc, #56]	; (8002804 <prvAddNewTaskToReadyList+0x10c>)
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4403      	add	r3, r0
 80027d4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80027d6:	f001 f9b7 	bl	8003b48 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80027da:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <prvAddNewTaskToReadyList+0x100>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <prvAddNewTaskToReadyList+0xfc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200001f8 	.word	0x200001f8
 80027f4:	20000120 	.word	0x20000120
 80027f8:	20000204 	.word	0x20000204
 80027fc:	20000214 	.word	0x20000214
 8002800:	20000200 	.word	0x20000200
 8002804:	20000124 	.word	0x20000124

08002808 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <vTaskStartScheduler+0x88>)
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2300      	movs	r3, #0
 8002818:	2282      	movs	r2, #130	; 0x82
 800281a:	491e      	ldr	r1, [pc, #120]	; (8002894 <vTaskStartScheduler+0x8c>)
 800281c:	481e      	ldr	r0, [pc, #120]	; (8002898 <vTaskStartScheduler+0x90>)
 800281e:	f7ff fe85 	bl	800252c <xTaskCreate>
 8002822:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d102      	bne.n	8002830 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800282a:	f000 fdad 	bl	8003388 <xTimerCreateTimerTask>
 800282e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d116      	bne.n	8002864 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800283a:	f383 8811 	msr	BASEPRI, r3
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	60bb      	str	r3, [r7, #8]
    }
 8002848:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <vTaskStartScheduler+0x94>)
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <vTaskStartScheduler+0x98>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002858:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <vTaskStartScheduler+0x9c>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800285e:	f001 f8a1 	bl	80039a4 <xPortStartScheduler>
 8002862:	e00e      	b.n	8002882 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d10a      	bne.n	8002882 <vTaskStartScheduler+0x7a>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	607b      	str	r3, [r7, #4]
    }
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <vTaskStartScheduler+0xa0>)
 8002884:	681b      	ldr	r3, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	2000021c 	.word	0x2000021c
 8002894:	08004b8c 	.word	0x08004b8c
 8002898:	080030f5 	.word	0x080030f5
 800289c:	20000218 	.word	0x20000218
 80028a0:	20000204 	.word	0x20000204
 80028a4:	200001fc 	.word	0x200001fc
 80028a8:	2000000c 	.word	0x2000000c

080028ac <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80028b0:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <vTaskSuspendAll+0x18>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	4a03      	ldr	r2, [pc, #12]	; (80028c4 <vTaskSuspendAll+0x18>)
 80028b8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	20000220 	.word	0x20000220

080028c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80028d6:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <xTaskResumeAll+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <xTaskResumeAll+0x2c>
        __asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	607b      	str	r3, [r7, #4]
    }
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80028f4:	f001 f8f8 	bl	8003ae8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <xTaskResumeAll+0x1bc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	4a61      	ldr	r2, [pc, #388]	; (8002a84 <xTaskResumeAll+0x1bc>)
 8002900:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002902:	4b60      	ldr	r3, [pc, #384]	; (8002a84 <xTaskResumeAll+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f040 80b4 	bne.w	8002a74 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800290c:	4b5e      	ldr	r3, [pc, #376]	; (8002a88 <xTaskResumeAll+0x1c0>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80af 	beq.w	8002a74 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002916:	e08a      	b.n	8002a2e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002918:	4b5c      	ldr	r3, [pc, #368]	; (8002a8c <xTaskResumeAll+0x1c4>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	6a12      	ldr	r2, [r2, #32]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	69d2      	ldr	r2, [r2, #28]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3318      	adds	r3, #24
 8002942:	429a      	cmp	r2, r3
 8002944:	d103      	bne.n	800294e <xTaskResumeAll+0x86>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2200      	movs	r2, #0
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	68d2      	ldr	r2, [r2, #12]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	3304      	adds	r3, #4
 8002980:	429a      	cmp	r2, r3
 8002982:	d103      	bne.n	800298c <xTaskResumeAll+0xc4>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	68da      	ldr	r2, [r3, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2200      	movs	r2, #0
 8002990:	615a      	str	r2, [r3, #20]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2201      	movs	r2, #1
 80029a2:	409a      	lsls	r2, r3
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <xTaskResumeAll+0x1c8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <xTaskResumeAll+0x1c8>)
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b2:	4938      	ldr	r1, [pc, #224]	; (8002a94 <xTaskResumeAll+0x1cc>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	3304      	adds	r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	3204      	adds	r2, #4
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	1d1a      	adds	r2, r3, #4
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <xTaskResumeAll+0x1cc>)
 80029f2:	441a      	add	r2, r3
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	615a      	str	r2, [r3, #20]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029fc:	4925      	ldr	r1, [pc, #148]	; (8002a94 <xTaskResumeAll+0x1cc>)
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	4821      	ldr	r0, [pc, #132]	; (8002a94 <xTaskResumeAll+0x1cc>)
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4403      	add	r3, r0
 8002a18:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <xTaskResumeAll+0x1d0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <xTaskResumeAll+0x1d4>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a2e:	4b17      	ldr	r3, [pc, #92]	; (8002a8c <xTaskResumeAll+0x1c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f47f af70 	bne.w	8002918 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002a3e:	f000 fbe9 	bl	8003214 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <xTaskResumeAll+0x1d8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a4e:	f000 f839 	bl	8002ac4 <xTaskIncrementTick>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002a58:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <xTaskResumeAll+0x1d4>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f1      	bne.n	8002a4e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <xTaskResumeAll+0x1d8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <xTaskResumeAll+0x1d4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a74:	f001 f868 	bl	8003b48 <vPortExitCritical>

    return xAlreadyYielded;
 8002a78:	697b      	ldr	r3, [r7, #20]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3720      	adds	r7, #32
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000220 	.word	0x20000220
 8002a88:	200001f8 	.word	0x200001f8
 8002a8c:	200001b8 	.word	0x200001b8
 8002a90:	20000200 	.word	0x20000200
 8002a94:	20000124 	.word	0x20000124
 8002a98:	20000120 	.word	0x20000120
 8002a9c:	2000020c 	.word	0x2000020c
 8002aa0:	20000208 	.word	0x20000208

08002aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <xTaskGetTickCount+0x1c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	200001fc 	.word	0x200001fc

08002ac4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ace:	4b6e      	ldr	r3, [pc, #440]	; (8002c88 <xTaskIncrementTick+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f040 80cd 	bne.w	8002c72 <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ad8:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <xTaskIncrementTick+0x1c8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3301      	adds	r3, #1
 8002ade:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ae0:	4a6a      	ldr	r2, [pc, #424]	; (8002c8c <xTaskIncrementTick+0x1c8>)
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d120      	bne.n	8002b2e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002aec:	4b68      	ldr	r3, [pc, #416]	; (8002c90 <xTaskIncrementTick+0x1cc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <xTaskIncrementTick+0x48>
        __asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	607b      	str	r3, [r7, #4]
    }
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <xTaskIncrementTick+0x46>
 8002b0c:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <xTaskIncrementTick+0x1cc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	4b60      	ldr	r3, [pc, #384]	; (8002c94 <xTaskIncrementTick+0x1d0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5e      	ldr	r2, [pc, #376]	; (8002c90 <xTaskIncrementTick+0x1cc>)
 8002b18:	6013      	str	r3, [r2, #0]
 8002b1a:	4a5e      	ldr	r2, [pc, #376]	; (8002c94 <xTaskIncrementTick+0x1d0>)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <xTaskIncrementTick+0x1d4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	4a5c      	ldr	r2, [pc, #368]	; (8002c98 <xTaskIncrementTick+0x1d4>)
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	f000 fb73 	bl	8003214 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b2e:	4b5b      	ldr	r3, [pc, #364]	; (8002c9c <xTaskIncrementTick+0x1d8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a3a      	ldr	r2, [r7, #32]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	f0c0 80a1 	bcc.w	8002c7c <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <xTaskIncrementTick+0x1cc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d104      	bne.n	8002b4e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b44:	4b55      	ldr	r3, [pc, #340]	; (8002c9c <xTaskIncrementTick+0x1d8>)
 8002b46:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4a:	601a      	str	r2, [r3, #0]
                    break;
 8002b4c:	e096      	b.n	8002c7c <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b4e:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <xTaskIncrementTick+0x1cc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002b5e:	6a3a      	ldr	r2, [r7, #32]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d203      	bcs.n	8002b6e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b66:	4a4d      	ldr	r2, [pc, #308]	; (8002c9c <xTaskIncrementTick+0x1d8>)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002b6c:	e086      	b.n	8002c7c <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	68d2      	ldr	r2, [r2, #12]
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	6892      	ldr	r2, [r2, #8]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d103      	bne.n	8002b9c <xTaskIncrementTick+0xd8>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	1e5a      	subs	r2, r3, #1
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01e      	beq.n	8002bf2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	6a12      	ldr	r2, [r2, #32]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	69d2      	ldr	r2, [r2, #28]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d103      	bne.n	8002be2 <xTaskIncrementTick+0x11e>
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2200      	movs	r2, #0
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	1e5a      	subs	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <xTaskIncrementTick+0x1dc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	4a27      	ldr	r2, [pc, #156]	; (8002ca0 <xTaskIncrementTick+0x1dc>)
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c08:	4926      	ldr	r1, [pc, #152]	; (8002ca4 <xTaskIncrementTick+0x1e0>)
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3304      	adds	r3, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	60da      	str	r2, [r3, #12]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	3204      	adds	r2, #4
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	1d1a      	adds	r2, r3, #4
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <xTaskIncrementTick+0x1e0>)
 8002c48:	441a      	add	r2, r3
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	615a      	str	r2, [r3, #20]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c52:	4914      	ldr	r1, [pc, #80]	; (8002ca4 <xTaskIncrementTick+0x1e0>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	1c59      	adds	r1, r3, #1
 8002c62:	4810      	ldr	r0, [pc, #64]	; (8002ca4 <xTaskIncrementTick+0x1e0>)
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4403      	add	r3, r0
 8002c6e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c70:	e763      	b.n	8002b3a <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <xTaskIncrementTick+0x1e4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <xTaskIncrementTick+0x1e4>)
 8002c7a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3728      	adds	r7, #40	; 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000220 	.word	0x20000220
 8002c8c:	200001fc 	.word	0x200001fc
 8002c90:	200001b0 	.word	0x200001b0
 8002c94:	200001b4 	.word	0x200001b4
 8002c98:	20000210 	.word	0x20000210
 8002c9c:	20000218 	.word	0x20000218
 8002ca0:	20000200 	.word	0x20000200
 8002ca4:	20000124 	.word	0x20000124
 8002ca8:	20000208 	.word	0x20000208

08002cac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <vTaskSwitchContext+0xa4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <vTaskSwitchContext+0xa8>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002cc0:	e03f      	b.n	8002d42 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002cc2:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <vTaskSwitchContext+0xa8>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc8:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <vTaskSwitchContext+0xac>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	fab3 f383 	clz	r3, r3
 8002cd4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	f1c3 031f 	rsb	r3, r3, #31
 8002cdc:	617b      	str	r3, [r7, #20]
 8002cde:	491f      	ldr	r1, [pc, #124]	; (8002d5c <vTaskSwitchContext+0xb0>)
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10a      	bne.n	8002d08 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	607b      	str	r3, [r7, #4]
    }
 8002d04:	bf00      	nop
 8002d06:	e7fe      	b.n	8002d06 <vTaskSwitchContext+0x5a>
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <vTaskSwitchContext+0xb0>)
 8002d14:	4413      	add	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	3308      	adds	r3, #8
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d104      	bne.n	8002d38 <vTaskSwitchContext+0x8c>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	4a08      	ldr	r2, [pc, #32]	; (8002d60 <vTaskSwitchContext+0xb4>)
 8002d40:	6013      	str	r3, [r2, #0]
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000220 	.word	0x20000220
 8002d54:	2000020c 	.word	0x2000020c
 8002d58:	20000200 	.word	0x20000200
 8002d5c:	20000124 	.word	0x20000124
 8002d60:	20000120 	.word	0x20000120

08002d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	60fb      	str	r3, [r7, #12]
    }
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <vTaskPlaceOnEventList+0x44>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	3318      	adds	r3, #24
 8002d90:	4619      	mov	r1, r3
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff f88f 	bl	8001eb6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002d98:	2101      	movs	r1, #1
 8002d9a:	6838      	ldr	r0, [r7, #0]
 8002d9c:	f000 fa74 	bl	8003288 <prvAddCurrentTaskToDelayedList>
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000120 	.word	0x20000120

08002dac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	613b      	str	r3, [r7, #16]
    }
 8002dd0:	bf00      	nop
 8002dd2:	e7fe      	b.n	8002dd2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <vTaskPlaceOnEventListRestricted+0x88>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	61da      	str	r2, [r3, #28]
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <vTaskPlaceOnEventListRestricted+0x88>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	6892      	ldr	r2, [r2, #8]
 8002dea:	621a      	str	r2, [r3, #32]
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <vTaskPlaceOnEventListRestricted+0x88>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	3218      	adds	r2, #24
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <vTaskPlaceOnEventListRestricted+0x88>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f103 0218 	add.w	r2, r3, #24
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <vTaskPlaceOnEventListRestricted+0x88>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e20:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	68b8      	ldr	r0, [r7, #8]
 8002e26:	f000 fa2f 	bl	8003288 <prvAddCurrentTaskToDelayedList>
    }
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000120 	.word	0x20000120

08002e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b08b      	sub	sp, #44	; 0x2c
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	60fb      	str	r3, [r7, #12]
    }
 8002e60:	bf00      	nop
 8002e62:	e7fe      	b.n	8002e62 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	6a3a      	ldr	r2, [r7, #32]
 8002e70:	6a12      	ldr	r2, [r2, #32]
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	6a3a      	ldr	r2, [r7, #32]
 8002e7a:	69d2      	ldr	r2, [r2, #28]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	3318      	adds	r3, #24
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d103      	bne.n	8002e92 <xTaskRemoveFromEventList+0x5a>
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	2200      	movs	r2, #0
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1e5a      	subs	r2, r3, #1
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <xTaskRemoveFromEventList+0x194>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d15e      	bne.n	8002f68 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	68d2      	ldr	r2, [r2, #12]
 8002eb8:	609a      	str	r2, [r3, #8]
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	6a3a      	ldr	r2, [r7, #32]
 8002ec0:	6892      	ldr	r2, [r2, #8]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	3304      	adds	r3, #4
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d103      	bne.n	8002ed8 <xTaskRemoveFromEventList+0xa0>
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	1e5a      	subs	r2, r3, #1
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	2201      	movs	r2, #1
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <xTaskRemoveFromEventList+0x198>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	4a36      	ldr	r2, [pc, #216]	; (8002fd0 <xTaskRemoveFromEventList+0x198>)
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efe:	4935      	ldr	r1, [pc, #212]	; (8002fd4 <xTaskRemoveFromEventList+0x19c>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	6a3a      	ldr	r2, [r7, #32]
 8002f24:	3204      	adds	r2, #4
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	1d1a      	adds	r2, r3, #4
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4a25      	ldr	r2, [pc, #148]	; (8002fd4 <xTaskRemoveFromEventList+0x19c>)
 8002f3e:	441a      	add	r2, r3
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	615a      	str	r2, [r3, #20]
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f48:	4922      	ldr	r1, [pc, #136]	; (8002fd4 <xTaskRemoveFromEventList+0x19c>)
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	481e      	ldr	r0, [pc, #120]	; (8002fd4 <xTaskRemoveFromEventList+0x19c>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4403      	add	r3, r0
 8002f64:	6019      	str	r1, [r3, #0]
 8002f66:	e01b      	b.n	8002fa0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <xTaskRemoveFromEventList+0x1a0>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	61da      	str	r2, [r3, #28]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	621a      	str	r2, [r3, #32]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	6a3a      	ldr	r2, [r7, #32]
 8002f82:	3218      	adds	r2, #24
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	6a3b      	ldr	r3, [r7, #32]
 8002f88:	f103 0218 	add.w	r2, r3, #24
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <xTaskRemoveFromEventList+0x1a0>)
 8002f94:	629a      	str	r2, [r3, #40]	; 0x28
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <xTaskRemoveFromEventList+0x1a0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <xTaskRemoveFromEventList+0x1a0>)
 8002f9e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	4b0d      	ldr	r3, [pc, #52]	; (8002fdc <xTaskRemoveFromEventList+0x1a4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d905      	bls.n	8002fba <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <xTaskRemoveFromEventList+0x1a8>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e001      	b.n	8002fbe <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	372c      	adds	r7, #44	; 0x2c
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	20000220 	.word	0x20000220
 8002fd0:	20000200 	.word	0x20000200
 8002fd4:	20000124 	.word	0x20000124
 8002fd8:	200001b8 	.word	0x200001b8
 8002fdc:	20000120 	.word	0x20000120
 8002fe0:	2000020c 	.word	0x2000020c

08002fe4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <vTaskInternalSetTimeOutState+0x24>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <vTaskInternalSetTimeOutState+0x28>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	605a      	str	r2, [r3, #4]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	20000210 	.word	0x20000210
 800300c:	200001fc 	.word	0x200001fc

08003010 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	613b      	str	r3, [r7, #16]
    }
 8003032:	bf00      	nop
 8003034:	e7fe      	b.n	8003034 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	60fb      	str	r3, [r7, #12]
    }
 800304e:	bf00      	nop
 8003050:	e7fe      	b.n	8003050 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003052:	f000 fd49 	bl	8003ae8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003056:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <xTaskCheckForTimeOut+0xc4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d102      	bne.n	8003076 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e026      	b.n	80030c4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <xTaskCheckForTimeOut+0xc8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d00a      	beq.n	8003098 <xTaskCheckForTimeOut+0x88>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	429a      	cmp	r2, r3
 800308a:	d305      	bcc.n	8003098 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800308c:	2301      	movs	r3, #1
 800308e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e015      	b.n	80030c4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d20b      	bcs.n	80030ba <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	1ad2      	subs	r2, r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff ff98 	bl	8002fe4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
 80030b8:	e004      	b.n	80030c4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80030c0:	2301      	movs	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80030c4:	f000 fd40 	bl	8003b48 <vPortExitCritical>

    return xReturn;
 80030c8:	69fb      	ldr	r3, [r7, #28]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	200001fc 	.word	0x200001fc
 80030d8:	20000210 	.word	0x20000210

080030dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <vTaskMissedYield+0x14>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
}
 80030e6:	bf00      	nop
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	2000020c 	.word	0x2000020c

080030f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80030fc:	f000 f84c 	bl	8003198 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <prvIdleTask+0x20>)
 8003102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003110:	e7f4      	b.n	80030fc <prvIdleTask+0x8>
 8003112:	bf00      	nop
 8003114:	e000ed04 	.word	0xe000ed04

08003118 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	e00c      	b.n	800313e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4a12      	ldr	r2, [pc, #72]	; (8003178 <prvInitialiseTaskLists+0x60>)
 8003130:	4413      	add	r3, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe fe92 	bl	8001e5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3301      	adds	r3, #1
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b04      	cmp	r3, #4
 8003142:	d9ef      	bls.n	8003124 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003144:	480d      	ldr	r0, [pc, #52]	; (800317c <prvInitialiseTaskLists+0x64>)
 8003146:	f7fe fe89 	bl	8001e5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800314a:	480d      	ldr	r0, [pc, #52]	; (8003180 <prvInitialiseTaskLists+0x68>)
 800314c:	f7fe fe86 	bl	8001e5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003150:	480c      	ldr	r0, [pc, #48]	; (8003184 <prvInitialiseTaskLists+0x6c>)
 8003152:	f7fe fe83 	bl	8001e5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003156:	480c      	ldr	r0, [pc, #48]	; (8003188 <prvInitialiseTaskLists+0x70>)
 8003158:	f7fe fe80 	bl	8001e5c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800315c:	480b      	ldr	r0, [pc, #44]	; (800318c <prvInitialiseTaskLists+0x74>)
 800315e:	f7fe fe7d 	bl	8001e5c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <prvInitialiseTaskLists+0x78>)
 8003164:	4a05      	ldr	r2, [pc, #20]	; (800317c <prvInitialiseTaskLists+0x64>)
 8003166:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <prvInitialiseTaskLists+0x7c>)
 800316a:	4a05      	ldr	r2, [pc, #20]	; (8003180 <prvInitialiseTaskLists+0x68>)
 800316c:	601a      	str	r2, [r3, #0]
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000124 	.word	0x20000124
 800317c:	20000188 	.word	0x20000188
 8003180:	2000019c 	.word	0x2000019c
 8003184:	200001b8 	.word	0x200001b8
 8003188:	200001cc 	.word	0x200001cc
 800318c:	200001e4 	.word	0x200001e4
 8003190:	200001b0 	.word	0x200001b0
 8003194:	200001b4 	.word	0x200001b4

08003198 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800319e:	e019      	b.n	80031d4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80031a0:	f000 fca2 	bl	8003ae8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <prvCheckTasksWaitingTermination+0x50>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe feb9 	bl	8001f28 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80031b6:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <prvCheckTasksWaitingTermination+0x54>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <prvCheckTasksWaitingTermination+0x54>)
 80031be:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <prvCheckTasksWaitingTermination+0x58>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <prvCheckTasksWaitingTermination+0x58>)
 80031c8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80031ca:	f000 fcbd 	bl	8003b48 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f810 	bl	80031f4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <prvCheckTasksWaitingTermination+0x58>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1e1      	bne.n	80031a0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200001cc 	.word	0x200001cc
 80031ec:	200001f8 	.word	0x200001f8
 80031f0:	200001e0 	.word	0x200001e0

080031f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe33 	bl	8003e6c <vPortFree>
                vPortFree( pxTCB );
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fe30 	bl	8003e6c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800320c:	bf00      	nop
 800320e:	3708      	adds	r7, #8
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <prvResetNextTaskUnblockTime+0x30>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <prvResetNextTaskUnblockTime+0x34>)
 8003224:	f04f 32ff 	mov.w	r2, #4294967295
 8003228:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800322a:	e005      	b.n	8003238 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <prvResetNextTaskUnblockTime+0x30>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <prvResetNextTaskUnblockTime+0x34>)
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	200001b0 	.word	0x200001b0
 8003248:	20000218 	.word	0x20000218

0800324c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <xTaskGetSchedulerState+0x34>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800325a:	2301      	movs	r3, #1
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	e008      	b.n	8003272 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <xTaskGetSchedulerState+0x38>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d102      	bne.n	800326e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003268:	2302      	movs	r3, #2
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	e001      	b.n	8003272 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003272:	687b      	ldr	r3, [r7, #4]
    }
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	20000204 	.word	0x20000204
 8003284:	20000220 	.word	0x20000220

08003288 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003292:	4b36      	ldr	r3, [pc, #216]	; (800336c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3304      	adds	r3, #4
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fe42 	bl	8001f28 <uxListRemove>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80032aa:	4b31      	ldr	r3, [pc, #196]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	2201      	movs	r2, #1
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	4b2e      	ldr	r3, [pc, #184]	; (8003374 <prvAddCurrentTaskToDelayedList+0xec>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4013      	ands	r3, r2
 80032be:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <prvAddCurrentTaskToDelayedList+0xec>)
 80032c0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c8:	d124      	bne.n	8003314 <prvAddCurrentTaskToDelayedList+0x8c>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d021      	beq.n	8003314 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <prvAddCurrentTaskToDelayedList+0xf0>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	4b26      	ldr	r3, [pc, #152]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	6892      	ldr	r2, [r2, #8]
 80032e6:	60da      	str	r2, [r3, #12]
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	3204      	adds	r2, #4
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	1d1a      	adds	r2, r3, #4
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003304:	615a      	str	r2, [r3, #20]
 8003306:	4b1c      	ldr	r3, [pc, #112]	; (8003378 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3301      	adds	r3, #1
 800330c:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <prvAddCurrentTaskToDelayedList+0xf0>)
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003312:	e026      	b.n	8003362 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	429a      	cmp	r2, r3
 800332a:	d209      	bcs.n	8003340 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <prvAddCurrentTaskToDelayedList+0xf4>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3304      	adds	r3, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f7fe fdbc 	bl	8001eb6 <vListInsert>
}
 800333e:	e010      	b.n	8003362 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	3304      	adds	r3, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f7fe fdb2 	bl	8001eb6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	429a      	cmp	r2, r3
 800335a:	d202      	bcs.n	8003362 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800335c:	4a09      	ldr	r2, [pc, #36]	; (8003384 <prvAddCurrentTaskToDelayedList+0xfc>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6013      	str	r3, [r2, #0]
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200001fc 	.word	0x200001fc
 8003370:	20000120 	.word	0x20000120
 8003374:	20000200 	.word	0x20000200
 8003378:	200001e4 	.word	0x200001e4
 800337c:	200001b4 	.word	0x200001b4
 8003380:	200001b0 	.word	0x200001b0
 8003384:	20000218 	.word	0x20000218

08003388 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003392:	f000 fa47 	bl	8003824 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <xTimerCreateTimerTask+0x54>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00b      	beq.n	80033b6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <xTimerCreateTimerTask+0x58>)
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2302      	movs	r3, #2
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2300      	movs	r3, #0
 80033a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033ac:	490d      	ldr	r1, [pc, #52]	; (80033e4 <xTimerCreateTimerTask+0x5c>)
 80033ae:	480e      	ldr	r0, [pc, #56]	; (80033e8 <xTimerCreateTimerTask+0x60>)
 80033b0:	f7ff f8bc 	bl	800252c <xTaskCreate>
 80033b4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10a      	bne.n	80033d2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	603b      	str	r3, [r7, #0]
    }
 80033ce:	bf00      	nop
 80033d0:	e7fe      	b.n	80033d0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80033d2:	687b      	ldr	r3, [r7, #4]
    }
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000254 	.word	0x20000254
 80033e0:	20000258 	.word	0x20000258
 80033e4:	08004b94 	.word	0x08004b94
 80033e8:	08003491 	.word	0x08003491

080033ec <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80033f8:	e008      	b.n	800340c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	4413      	add	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	18d1      	adds	r1, r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f8dd 	bl	80035d8 <prvInsertTimerInActiveList>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ea      	bne.n	80033fa <prvReloadTimer+0xe>
        }
    }
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <prvProcessExpiredTimer+0x5c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3304      	adds	r3, #4
 8003448:	4618      	mov	r0, r3
 800344a:	f7fe fd6d 	bl	8001f28 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7ff ffc3 	bl	80033ec <prvReloadTimer>
 8003466:	e008      	b.n	800347a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	b2da      	uxtb	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	4798      	blx	r3
    }
 8003482:	bf00      	nop
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	2000024c 	.word	0x2000024c

08003490 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003498:	f107 0308 	add.w	r3, r7, #8
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f857 	bl	8003550 <prvGetNextExpireTime>
 80034a2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4619      	mov	r1, r3
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f803 	bl	80034b4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80034ae:	f000 f8d5 	bl	800365c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80034b2:	e7f1      	b.n	8003498 <prvTimerTask+0x8>

080034b4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80034be:	f7ff f9f5 	bl	80028ac <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80034c2:	f107 0308 	add.w	r3, r7, #8
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f866 	bl	8003598 <prvSampleTimeNow>
 80034cc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d130      	bne.n	8003536 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <prvProcessTimerOrBlockTask+0x3c>
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d806      	bhi.n	80034f0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80034e2:	f7ff f9f1 	bl	80028c8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ffa1 	bl	8003430 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80034ee:	e024      	b.n	800353a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d008      	beq.n	8003508 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034f6:	4b13      	ldr	r3, [pc, #76]	; (8003544 <prvProcessTimerOrBlockTask+0x90>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <prvProcessTimerOrBlockTask+0x50>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <prvProcessTimerOrBlockTask+0x52>
 8003504:	2300      	movs	r3, #0
 8003506:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <prvProcessTimerOrBlockTask+0x94>)
 800350a:	6818      	ldr	r0, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	f7fe ffd5 	bl	80024c4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800351a:	f7ff f9d5 	bl	80028c8 <xTaskResumeAll>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <prvProcessTimerOrBlockTask+0x98>)
 8003526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	f3bf 8f6f 	isb	sy
    }
 8003534:	e001      	b.n	800353a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003536:	f7ff f9c7 	bl	80028c8 <xTaskResumeAll>
    }
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000250 	.word	0x20000250
 8003548:	20000254 	.word	0x20000254
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <prvGetNextExpireTime+0x44>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <prvGetNextExpireTime+0x16>
 8003562:	2201      	movs	r2, #1
 8003564:	e000      	b.n	8003568 <prvGetNextExpireTime+0x18>
 8003566:	2200      	movs	r2, #0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d105      	bne.n	8003580 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003574:	4b07      	ldr	r3, [pc, #28]	; (8003594 <prvGetNextExpireTime+0x44>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e001      	b.n	8003584 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003584:	68fb      	ldr	r3, [r7, #12]
    }
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	2000024c 	.word	0x2000024c

08003598 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80035a0:	f7ff fa80 	bl	8002aa4 <xTaskGetTickCount>
 80035a4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <prvSampleTimeNow+0x3c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d205      	bcs.n	80035bc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80035b0:	f000 f912 	bl	80037d8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e002      	b.n	80035c2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80035c2:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <prvSampleTimeNow+0x3c>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80035c8:	68fb      	ldr	r3, [r7, #12]
    }
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	2000025c 	.word	0x2000025c

080035d8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
 80035e4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d812      	bhi.n	8003624 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	1ad2      	subs	r2, r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	429a      	cmp	r2, r3
 800360a:	d302      	bcc.n	8003612 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e01b      	b.n	800364a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <prvInsertTimerInActiveList+0x7c>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3304      	adds	r3, #4
 800361a:	4619      	mov	r1, r3
 800361c:	4610      	mov	r0, r2
 800361e:	f7fe fc4a 	bl	8001eb6 <vListInsert>
 8003622:	e012      	b.n	800364a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d206      	bcs.n	800363a <prvInsertTimerInActiveList+0x62>
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003634:	2301      	movs	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	e007      	b.n	800364a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <prvInsertTimerInActiveList+0x80>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3304      	adds	r3, #4
 8003642:	4619      	mov	r1, r3
 8003644:	4610      	mov	r0, r2
 8003646:	f7fe fc36 	bl	8001eb6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800364a:	697b      	ldr	r3, [r7, #20]
    }
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000250 	.word	0x20000250
 8003658:	2000024c 	.word	0x2000024c

0800365c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003662:	e0a6      	b.n	80037b2 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f2c0 80a2 	blt.w	80037b0 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	3304      	adds	r3, #4
 800367c:	4618      	mov	r0, r3
 800367e:	f7fe fc53 	bl	8001f28 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff87 	bl	8003598 <prvSampleTimeNow>
 800368a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	3b01      	subs	r3, #1
 8003690:	2b08      	cmp	r3, #8
 8003692:	f200 808e 	bhi.w	80037b2 <prvProcessReceivedCommands+0x156>
 8003696:	a201      	add	r2, pc, #4	; (adr r2, 800369c <prvProcessReceivedCommands+0x40>)
 8003698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369c:	080036c1 	.word	0x080036c1
 80036a0:	080036c1 	.word	0x080036c1
 80036a4:	08003729 	.word	0x08003729
 80036a8:	0800373d 	.word	0x0800373d
 80036ac:	08003787 	.word	0x08003787
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036c1 	.word	0x080036c1
 80036b8:	08003729 	.word	0x08003729
 80036bc:	0800373d 	.word	0x0800373d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	18d1      	adds	r1, r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	69f8      	ldr	r0, [r7, #28]
 80036e0:	f7ff ff7a 	bl	80035d8 <prvInsertTimerInActiveList>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d063      	beq.n	80037b2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4413      	add	r3, r2
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4619      	mov	r1, r3
 8003704:	69f8      	ldr	r0, [r7, #28]
 8003706:	f7ff fe71 	bl	80033ec <prvReloadTimer>
 800370a:	e008      	b.n	800371e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	69f8      	ldr	r0, [r7, #28]
 8003724:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003726:	e044      	b.n	80037b2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800373a:	e03a      	b.n	80037b2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	b2da      	uxtb	r2, r3
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	617b      	str	r3, [r7, #20]
    }
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	18d1      	adds	r1, r2, r3
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	69f8      	ldr	r0, [r7, #28]
 8003780:	f7ff ff2a 	bl	80035d8 <prvInsertTimerInActiveList>
                        break;
 8003784:	e015      	b.n	80037b2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003794:	69f8      	ldr	r0, [r7, #28]
 8003796:	f000 fb69 	bl	8003e6c <vPortFree>
 800379a:	e00a      	b.n	80037b2 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80037ae:	e000      	b.n	80037b2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80037b0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037b2:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <prvProcessReceivedCommands+0x178>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f107 0108 	add.w	r1, r7, #8
 80037ba:	2200      	movs	r2, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fe fcd1 	bl	8002164 <xQueueReceive>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f47f af4d 	bne.w	8003664 <prvProcessReceivedCommands+0x8>
        }
    }
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000254 	.word	0x20000254

080037d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037de:	e009      	b.n	80037f4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <prvSwitchTimerLists+0x44>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80037ea:	f04f 31ff 	mov.w	r1, #4294967295
 80037ee:	6838      	ldr	r0, [r7, #0]
 80037f0:	f7ff fe1e 	bl	8003430 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <prvSwitchTimerLists+0x44>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <prvSwitchTimerLists+0x44>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <prvSwitchTimerLists+0x48>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a04      	ldr	r2, [pc, #16]	; (800381c <prvSwitchTimerLists+0x44>)
 800380a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <prvSwitchTimerLists+0x48>)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6013      	str	r3, [r2, #0]
    }
 8003812:	bf00      	nop
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	2000024c 	.word	0x2000024c
 8003820:	20000250 	.word	0x20000250

08003824 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003828:	f000 f95e 	bl	8003ae8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <prvCheckForValidListAndQueue+0x54>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d11d      	bne.n	8003870 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003834:	4811      	ldr	r0, [pc, #68]	; (800387c <prvCheckForValidListAndQueue+0x58>)
 8003836:	f7fe fb11 	bl	8001e5c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800383a:	4811      	ldr	r0, [pc, #68]	; (8003880 <prvCheckForValidListAndQueue+0x5c>)
 800383c:	f7fe fb0e 	bl	8001e5c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003840:	4b10      	ldr	r3, [pc, #64]	; (8003884 <prvCheckForValidListAndQueue+0x60>)
 8003842:	4a0e      	ldr	r2, [pc, #56]	; (800387c <prvCheckForValidListAndQueue+0x58>)
 8003844:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003846:	4b10      	ldr	r3, [pc, #64]	; (8003888 <prvCheckForValidListAndQueue+0x64>)
 8003848:	4a0d      	ldr	r2, [pc, #52]	; (8003880 <prvCheckForValidListAndQueue+0x5c>)
 800384a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800384c:	2200      	movs	r2, #0
 800384e:	210c      	movs	r1, #12
 8003850:	200a      	movs	r0, #10
 8003852:	f7fe fc15 	bl	8002080 <xQueueGenericCreate>
 8003856:	4603      	mov	r3, r0
 8003858:	4a07      	ldr	r2, [pc, #28]	; (8003878 <prvCheckForValidListAndQueue+0x54>)
 800385a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <prvCheckForValidListAndQueue+0x54>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <prvCheckForValidListAndQueue+0x54>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4908      	ldr	r1, [pc, #32]	; (800388c <prvCheckForValidListAndQueue+0x68>)
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fddc 	bl	8002428 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003870:	f000 f96a 	bl	8003b48 <vPortExitCritical>
    }
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20000254 	.word	0x20000254
 800387c:	20000224 	.word	0x20000224
 8003880:	20000238 	.word	0x20000238
 8003884:	2000024c 	.word	0x2000024c
 8003888:	20000250 	.word	0x20000250
 800388c:	08004b9c 	.word	0x08004b9c

08003890 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3b04      	subs	r3, #4
 80038a0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b04      	subs	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f023 0201 	bic.w	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3b04      	subs	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80038c0:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <pxPortInitialiseStack+0x64>)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3b14      	subs	r3, #20
 80038ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3b04      	subs	r3, #4
 80038d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f06f 0202 	mvn.w	r2, #2
 80038de:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3b20      	subs	r3, #32
 80038e4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	080038f9 	.word	0x080038f9

080038f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <prvTaskExitError+0x54>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d00a      	beq.n	8003922 <prvTaskExitError+0x2a>
        __asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	60fb      	str	r3, [r7, #12]
    }
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <prvTaskExitError+0x28>
        __asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60bb      	str	r3, [r7, #8]
    }
 8003934:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003936:	bf00      	nop
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0fc      	beq.n	8003938 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800393e:	bf00      	nop
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	20000010 	.word	0x20000010

08003950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <pxCurrentTCBConst2>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	6808      	ldr	r0, [r1, #0]
 8003956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395a:	f380 8809 	msr	PSP, r0
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f380 8811 	msr	BASEPRI, r0
 800396a:	4770      	bx	lr
 800396c:	f3af 8000 	nop.w

08003970 <pxCurrentTCBConst2>:
 8003970:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop

08003978 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003978:	4808      	ldr	r0, [pc, #32]	; (800399c <prvPortStartFirstTask+0x24>)
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	6800      	ldr	r0, [r0, #0]
 800397e:	f380 8808 	msr	MSP, r0
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8814 	msr	CONTROL, r0
 800398a:	b662      	cpsie	i
 800398c:	b661      	cpsie	f
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	df00      	svc	0
 8003998:	bf00      	nop
 800399a:	0000      	.short	0x0000
 800399c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop

080039a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039aa:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <xPortStartScheduler+0x120>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a46      	ldr	r2, [pc, #280]	; (8003ac8 <xPortStartScheduler+0x124>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10a      	bne.n	80039ca <xPortStartScheduler+0x26>
        __asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	613b      	str	r3, [r7, #16]
    }
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <xPortStartScheduler+0x120>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a3f      	ldr	r2, [pc, #252]	; (8003acc <xPortStartScheduler+0x128>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10a      	bne.n	80039ea <xPortStartScheduler+0x46>
        __asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	60fb      	str	r3, [r7, #12]
    }
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80039ea:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <xPortStartScheduler+0x12c>)
 80039ec:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	22ff      	movs	r2, #255	; 0xff
 80039fa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <xPortStartScheduler+0x130>)
 8003a10:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a12:	4b31      	ldr	r3, [pc, #196]	; (8003ad8 <xPortStartScheduler+0x134>)
 8003a14:	2207      	movs	r2, #7
 8003a16:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a18:	e009      	b.n	8003a2e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	; (8003ad8 <xPortStartScheduler+0x134>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	4a2d      	ldr	r2, [pc, #180]	; (8003ad8 <xPortStartScheduler+0x134>)
 8003a22:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b80      	cmp	r3, #128	; 0x80
 8003a38:	d0ef      	beq.n	8003a1a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a3a:	4b27      	ldr	r3, [pc, #156]	; (8003ad8 <xPortStartScheduler+0x134>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f1c3 0307 	rsb	r3, r3, #7
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d00a      	beq.n	8003a5c <xPortStartScheduler+0xb8>
        __asm volatile
 8003a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	60bb      	str	r3, [r7, #8]
    }
 8003a58:	bf00      	nop
 8003a5a:	e7fe      	b.n	8003a5a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <xPortStartScheduler+0x134>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <xPortStartScheduler+0x134>)
 8003a64:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a66:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <xPortStartScheduler+0x134>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <xPortStartScheduler+0x134>)
 8003a70:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003a7a:	4b18      	ldr	r3, [pc, #96]	; (8003adc <xPortStartScheduler+0x138>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a17      	ldr	r2, [pc, #92]	; (8003adc <xPortStartScheduler+0x138>)
 8003a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003a86:	4b15      	ldr	r3, [pc, #84]	; (8003adc <xPortStartScheduler+0x138>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <xPortStartScheduler+0x138>)
 8003a8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003a92:	f000 f8db 	bl	8003c4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003a96:	4b12      	ldr	r3, [pc, #72]	; (8003ae0 <xPortStartScheduler+0x13c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003a9c:	f000 f8fa 	bl	8003c94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <xPortStartScheduler+0x140>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <xPortStartScheduler+0x140>)
 8003aa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003aaa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003aac:	f7ff ff64 	bl	8003978 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003ab0:	f7ff f8fc 	bl	8002cac <vTaskSwitchContext>
    prvTaskExitError();
 8003ab4:	f7ff ff20 	bl	80038f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	e000ed00 	.word	0xe000ed00
 8003ac8:	410fc271 	.word	0x410fc271
 8003acc:	410fc270 	.word	0x410fc270
 8003ad0:	e000e400 	.word	0xe000e400
 8003ad4:	20000260 	.word	0x20000260
 8003ad8:	20000264 	.word	0x20000264
 8003adc:	e000ed20 	.word	0xe000ed20
 8003ae0:	20000010 	.word	0x20000010
 8003ae4:	e000ef34 	.word	0xe000ef34

08003ae8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
        __asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	607b      	str	r3, [r7, #4]
    }
 8003b00:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003b02:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <vPortEnterCritical+0x58>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3301      	adds	r3, #1
 8003b08:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <vPortEnterCritical+0x58>)
 8003b0a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003b0c:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <vPortEnterCritical+0x58>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d10f      	bne.n	8003b34 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <vPortEnterCritical+0x5c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <vPortEnterCritical+0x4c>
        __asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	603b      	str	r3, [r7, #0]
    }
 8003b30:	bf00      	nop
 8003b32:	e7fe      	b.n	8003b32 <vPortEnterCritical+0x4a>
    }
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	20000010 	.word	0x20000010
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <vPortExitCritical+0x50>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <vPortExitCritical+0x24>
        __asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	607b      	str	r3, [r7, #4]
    }
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <vPortExitCritical+0x50>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <vPortExitCritical+0x50>)
 8003b74:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <vPortExitCritical+0x50>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d105      	bne.n	8003b8a <vPortExitCritical+0x42>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b88:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000010 	.word	0x20000010
 8003b9c:	00000000 	.word	0x00000000

08003ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003ba0:	f3ef 8009 	mrs	r0, PSP
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <pxCurrentTCBConst>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	f01e 0f10 	tst.w	lr, #16
 8003bb0:	bf08      	it	eq
 8003bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bba:	6010      	str	r0, [r2, #0]
 8003bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003bc4:	f380 8811 	msr	BASEPRI, r0
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f7ff f86c 	bl	8002cac <vTaskSwitchContext>
 8003bd4:	f04f 0000 	mov.w	r0, #0
 8003bd8:	f380 8811 	msr	BASEPRI, r0
 8003bdc:	bc09      	pop	{r0, r3}
 8003bde:	6819      	ldr	r1, [r3, #0]
 8003be0:	6808      	ldr	r0, [r1, #0]
 8003be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003be6:	f01e 0f10 	tst.w	lr, #16
 8003bea:	bf08      	it	eq
 8003bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003bf0:	f380 8809 	msr	PSP, r0
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	f3af 8000 	nop.w

08003c00 <pxCurrentTCBConst>:
 8003c00:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003c04:	bf00      	nop
 8003c06:	bf00      	nop

08003c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
        __asm volatile
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	607b      	str	r3, [r7, #4]
    }
 8003c20:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003c22:	f7fe ff4f 	bl	8002ac4 <xTaskIncrementTick>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <SysTick_Handler+0x40>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f383 8811 	msr	BASEPRI, r3
    }
 8003c3e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <vPortSetupTimerInterrupt+0x38>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003c5c:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <vPortSetupTimerInterrupt+0x3c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <vPortSetupTimerInterrupt+0x40>)
 8003c62:	fba2 2303 	umull	r2, r3, r2, r3
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	4a09      	ldr	r2, [pc, #36]	; (8003c90 <vPortSetupTimerInterrupt+0x44>)
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003c6e:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <vPortSetupTimerInterrupt+0x34>)
 8003c70:	2207      	movs	r2, #7
 8003c72:	601a      	str	r2, [r3, #0]
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000e010 	.word	0xe000e010
 8003c84:	e000e018 	.word	0xe000e018
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	10624dd3 	.word	0x10624dd3
 8003c90:	e000e014 	.word	0xe000e014

08003c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003ca4 <vPortEnableVFP+0x10>
 8003c98:	6801      	ldr	r1, [r0, #0]
 8003c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003c9e:	6001      	str	r1, [r0, #0]
 8003ca0:	4770      	bx	lr
 8003ca2:	0000      	.short	0x0000
 8003ca4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop

08003cac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003cb8:	f7fe fdf8 	bl	80028ac <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003cbc:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <pvPortMalloc+0x1a8>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003cc4:	f000 f934 	bl	8003f30 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003cc8:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <pvPortMalloc+0x1ac>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f040 80a7 	bne.w	8003e24 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d02d      	beq.n	8003d38 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003cdc:	2208      	movs	r2, #8
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d227      	bcs.n	8003d38 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003ce8:	2208      	movs	r2, #8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d021      	beq.n	8003d3e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f023 0307 	bic.w	r3, r3, #7
 8003d00:	3308      	adds	r3, #8
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d214      	bcs.n	8003d32 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f023 0307 	bic.w	r3, r3, #7
 8003d0e:	3308      	adds	r3, #8
 8003d10:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d010      	beq.n	8003d3e <pvPortMalloc+0x92>
        __asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	617b      	str	r3, [r7, #20]
    }
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d36:	e002      	b.n	8003d3e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	e000      	b.n	8003d40 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d3e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d06e      	beq.n	8003e24 <pvPortMalloc+0x178>
 8003d46:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <pvPortMalloc+0x1b0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d869      	bhi.n	8003e24 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003d50:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <pvPortMalloc+0x1b4>)
 8003d52:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003d54:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <pvPortMalloc+0x1b4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d5a:	e004      	b.n	8003d66 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d903      	bls.n	8003d78 <pvPortMalloc+0xcc>
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1f1      	bne.n	8003d5c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003d78:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <pvPortMalloc+0x1a8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d050      	beq.n	8003e24 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2208      	movs	r2, #8
 8003d88:	4413      	add	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d91f      	bls.n	8003de4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <pvPortMalloc+0x120>
        __asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	613b      	str	r3, [r7, #16]
    }
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad2      	subs	r2, r2, r3
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003dde:	69b8      	ldr	r0, [r7, #24]
 8003de0:	f000 f908 	bl	8003ff4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <pvPortMalloc+0x1b0>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <pvPortMalloc+0x1b0>)
 8003df0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003df2:	4b1a      	ldr	r3, [pc, #104]	; (8003e5c <pvPortMalloc+0x1b0>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <pvPortMalloc+0x1b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d203      	bcs.n	8003e06 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003dfe:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <pvPortMalloc+0x1b0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <pvPortMalloc+0x1b8>)
 8003e04:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <pvPortMalloc+0x1ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003e1a:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <pvPortMalloc+0x1bc>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a11      	ldr	r2, [pc, #68]	; (8003e68 <pvPortMalloc+0x1bc>)
 8003e22:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003e24:	f7fe fd50 	bl	80028c8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <pvPortMalloc+0x19c>
        __asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	60fb      	str	r3, [r7, #12]
    }
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <pvPortMalloc+0x19a>
    return pvReturn;
 8003e48:	69fb      	ldr	r3, [r7, #28]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3728      	adds	r7, #40	; 0x28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20006a70 	.word	0x20006a70
 8003e58:	20006a84 	.word	0x20006a84
 8003e5c:	20006a74 	.word	0x20006a74
 8003e60:	20006a68 	.word	0x20006a68
 8003e64:	20006a78 	.word	0x20006a78
 8003e68:	20006a7c 	.word	0x20006a7c

08003e6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d04d      	beq.n	8003f1a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	425b      	negs	r3, r3
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4413      	add	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <vPortFree+0xb8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10a      	bne.n	8003eb0 <vPortFree+0x44>
        __asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	60fb      	str	r3, [r7, #12]
    }
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <vPortFree+0x62>
        __asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	60bb      	str	r3, [r7, #8]
    }
 8003eca:	bf00      	nop
 8003ecc:	e7fe      	b.n	8003ecc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <vPortFree+0xb8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01e      	beq.n	8003f1a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11a      	bne.n	8003f1a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <vPortFree+0xb8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003ef4:	f7fe fcda 	bl	80028ac <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <vPortFree+0xbc>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4413      	add	r3, r2
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <vPortFree+0xbc>)
 8003f04:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003f06:	6938      	ldr	r0, [r7, #16]
 8003f08:	f000 f874 	bl	8003ff4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003f0c:	4b07      	ldr	r3, [pc, #28]	; (8003f2c <vPortFree+0xc0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <vPortFree+0xc0>)
 8003f14:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003f16:	f7fe fcd7 	bl	80028c8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003f1a:	bf00      	nop
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20006a84 	.word	0x20006a84
 8003f28:	20006a74 	.word	0x20006a74
 8003f2c:	20006a80 	.word	0x20006a80

08003f30 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003f36:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8003f3a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003f3c:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <prvHeapInit+0xac>)
 8003f3e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3307      	adds	r3, #7
 8003f4e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0307 	bic.w	r3, r3, #7
 8003f56:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <prvHeapInit+0xac>)
 8003f60:	4413      	add	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f68:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <prvHeapInit+0xb0>)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	; (8003fe0 <prvHeapInit+0xb0>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4413      	add	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0307 	bic.w	r3, r3, #7
 8003f8a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4a15      	ldr	r2, [pc, #84]	; (8003fe4 <prvHeapInit+0xb4>)
 8003f90:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003f92:	4b14      	ldr	r3, [pc, #80]	; (8003fe4 <prvHeapInit+0xb4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <prvHeapInit+0xb4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	1ad2      	subs	r2, r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <prvHeapInit+0xb4>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <prvHeapInit+0xb8>)
 8003fbe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a09      	ldr	r2, [pc, #36]	; (8003fec <prvHeapInit+0xbc>)
 8003fc6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <prvHeapInit+0xc0>)
 8003fca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003fce:	601a      	str	r2, [r3, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	20000268 	.word	0x20000268
 8003fe0:	20006a68 	.word	0x20006a68
 8003fe4:	20006a70 	.word	0x20006a70
 8003fe8:	20006a78 	.word	0x20006a78
 8003fec:	20006a74 	.word	0x20006a74
 8003ff0:	20006a84 	.word	0x20006a84

08003ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <prvInsertBlockIntoFreeList+0xac>)
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	e002      	b.n	8004008 <prvInsertBlockIntoFreeList+0x14>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d8f7      	bhi.n	8004002 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	4413      	add	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	429a      	cmp	r2, r3
 8004022:	d108      	bne.n	8004036 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	441a      	add	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	441a      	add	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d118      	bne.n	800407c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d00d      	beq.n	8004072 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	e008      	b.n	8004084 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <prvInsertBlockIntoFreeList+0xb0>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e003      	b.n	8004084 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d002      	beq.n	8004092 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	20006a68 	.word	0x20006a68
 80040a4:	20006a70 	.word	0x20006a70

080040a8 <__libc_init_array>:
 80040a8:	b570      	push	{r4, r5, r6, lr}
 80040aa:	4d0d      	ldr	r5, [pc, #52]	; (80040e0 <__libc_init_array+0x38>)
 80040ac:	4c0d      	ldr	r4, [pc, #52]	; (80040e4 <__libc_init_array+0x3c>)
 80040ae:	1b64      	subs	r4, r4, r5
 80040b0:	10a4      	asrs	r4, r4, #2
 80040b2:	2600      	movs	r6, #0
 80040b4:	42a6      	cmp	r6, r4
 80040b6:	d109      	bne.n	80040cc <__libc_init_array+0x24>
 80040b8:	4d0b      	ldr	r5, [pc, #44]	; (80040e8 <__libc_init_array+0x40>)
 80040ba:	4c0c      	ldr	r4, [pc, #48]	; (80040ec <__libc_init_array+0x44>)
 80040bc:	f000 fd3a 	bl	8004b34 <_init>
 80040c0:	1b64      	subs	r4, r4, r5
 80040c2:	10a4      	asrs	r4, r4, #2
 80040c4:	2600      	movs	r6, #0
 80040c6:	42a6      	cmp	r6, r4
 80040c8:	d105      	bne.n	80040d6 <__libc_init_array+0x2e>
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
 80040cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d0:	4798      	blx	r3
 80040d2:	3601      	adds	r6, #1
 80040d4:	e7ee      	b.n	80040b4 <__libc_init_array+0xc>
 80040d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80040da:	4798      	blx	r3
 80040dc:	3601      	adds	r6, #1
 80040de:	e7f2      	b.n	80040c6 <__libc_init_array+0x1e>
 80040e0:	08004c28 	.word	0x08004c28
 80040e4:	08004c28 	.word	0x08004c28
 80040e8:	08004c28 	.word	0x08004c28
 80040ec:	08004c2c 	.word	0x08004c2c

080040f0 <memcpy>:
 80040f0:	440a      	add	r2, r1
 80040f2:	4291      	cmp	r1, r2
 80040f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80040f8:	d100      	bne.n	80040fc <memcpy+0xc>
 80040fa:	4770      	bx	lr
 80040fc:	b510      	push	{r4, lr}
 80040fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004102:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004106:	4291      	cmp	r1, r2
 8004108:	d1f9      	bne.n	80040fe <memcpy+0xe>
 800410a:	bd10      	pop	{r4, pc}

0800410c <memset>:
 800410c:	4402      	add	r2, r0
 800410e:	4603      	mov	r3, r0
 8004110:	4293      	cmp	r3, r2
 8004112:	d100      	bne.n	8004116 <memset+0xa>
 8004114:	4770      	bx	lr
 8004116:	f803 1b01 	strb.w	r1, [r3], #1
 800411a:	e7f9      	b.n	8004110 <memset+0x4>

0800411c <_puts_r>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	460e      	mov	r6, r1
 8004120:	4605      	mov	r5, r0
 8004122:	b118      	cbz	r0, 800412c <_puts_r+0x10>
 8004124:	6983      	ldr	r3, [r0, #24]
 8004126:	b90b      	cbnz	r3, 800412c <_puts_r+0x10>
 8004128:	f000 fa48 	bl	80045bc <__sinit>
 800412c:	69ab      	ldr	r3, [r5, #24]
 800412e:	68ac      	ldr	r4, [r5, #8]
 8004130:	b913      	cbnz	r3, 8004138 <_puts_r+0x1c>
 8004132:	4628      	mov	r0, r5
 8004134:	f000 fa42 	bl	80045bc <__sinit>
 8004138:	4b2c      	ldr	r3, [pc, #176]	; (80041ec <_puts_r+0xd0>)
 800413a:	429c      	cmp	r4, r3
 800413c:	d120      	bne.n	8004180 <_puts_r+0x64>
 800413e:	686c      	ldr	r4, [r5, #4]
 8004140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004142:	07db      	lsls	r3, r3, #31
 8004144:	d405      	bmi.n	8004152 <_puts_r+0x36>
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	0598      	lsls	r0, r3, #22
 800414a:	d402      	bmi.n	8004152 <_puts_r+0x36>
 800414c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800414e:	f000 fad3 	bl	80046f8 <__retarget_lock_acquire_recursive>
 8004152:	89a3      	ldrh	r3, [r4, #12]
 8004154:	0719      	lsls	r1, r3, #28
 8004156:	d51d      	bpl.n	8004194 <_puts_r+0x78>
 8004158:	6923      	ldr	r3, [r4, #16]
 800415a:	b1db      	cbz	r3, 8004194 <_puts_r+0x78>
 800415c:	3e01      	subs	r6, #1
 800415e:	68a3      	ldr	r3, [r4, #8]
 8004160:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004164:	3b01      	subs	r3, #1
 8004166:	60a3      	str	r3, [r4, #8]
 8004168:	bb39      	cbnz	r1, 80041ba <_puts_r+0x9e>
 800416a:	2b00      	cmp	r3, #0
 800416c:	da38      	bge.n	80041e0 <_puts_r+0xc4>
 800416e:	4622      	mov	r2, r4
 8004170:	210a      	movs	r1, #10
 8004172:	4628      	mov	r0, r5
 8004174:	f000 f848 	bl	8004208 <__swbuf_r>
 8004178:	3001      	adds	r0, #1
 800417a:	d011      	beq.n	80041a0 <_puts_r+0x84>
 800417c:	250a      	movs	r5, #10
 800417e:	e011      	b.n	80041a4 <_puts_r+0x88>
 8004180:	4b1b      	ldr	r3, [pc, #108]	; (80041f0 <_puts_r+0xd4>)
 8004182:	429c      	cmp	r4, r3
 8004184:	d101      	bne.n	800418a <_puts_r+0x6e>
 8004186:	68ac      	ldr	r4, [r5, #8]
 8004188:	e7da      	b.n	8004140 <_puts_r+0x24>
 800418a:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <_puts_r+0xd8>)
 800418c:	429c      	cmp	r4, r3
 800418e:	bf08      	it	eq
 8004190:	68ec      	ldreq	r4, [r5, #12]
 8004192:	e7d5      	b.n	8004140 <_puts_r+0x24>
 8004194:	4621      	mov	r1, r4
 8004196:	4628      	mov	r0, r5
 8004198:	f000 f888 	bl	80042ac <__swsetup_r>
 800419c:	2800      	cmp	r0, #0
 800419e:	d0dd      	beq.n	800415c <_puts_r+0x40>
 80041a0:	f04f 35ff 	mov.w	r5, #4294967295
 80041a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041a6:	07da      	lsls	r2, r3, #31
 80041a8:	d405      	bmi.n	80041b6 <_puts_r+0x9a>
 80041aa:	89a3      	ldrh	r3, [r4, #12]
 80041ac:	059b      	lsls	r3, r3, #22
 80041ae:	d402      	bmi.n	80041b6 <_puts_r+0x9a>
 80041b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041b2:	f000 faa2 	bl	80046fa <__retarget_lock_release_recursive>
 80041b6:	4628      	mov	r0, r5
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	da04      	bge.n	80041c8 <_puts_r+0xac>
 80041be:	69a2      	ldr	r2, [r4, #24]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	dc06      	bgt.n	80041d2 <_puts_r+0xb6>
 80041c4:	290a      	cmp	r1, #10
 80041c6:	d004      	beq.n	80041d2 <_puts_r+0xb6>
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	6022      	str	r2, [r4, #0]
 80041ce:	7019      	strb	r1, [r3, #0]
 80041d0:	e7c5      	b.n	800415e <_puts_r+0x42>
 80041d2:	4622      	mov	r2, r4
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 f817 	bl	8004208 <__swbuf_r>
 80041da:	3001      	adds	r0, #1
 80041dc:	d1bf      	bne.n	800415e <_puts_r+0x42>
 80041de:	e7df      	b.n	80041a0 <_puts_r+0x84>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	250a      	movs	r5, #10
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	6022      	str	r2, [r4, #0]
 80041e8:	701d      	strb	r5, [r3, #0]
 80041ea:	e7db      	b.n	80041a4 <_puts_r+0x88>
 80041ec:	08004be0 	.word	0x08004be0
 80041f0:	08004c00 	.word	0x08004c00
 80041f4:	08004bc0 	.word	0x08004bc0

080041f8 <puts>:
 80041f8:	4b02      	ldr	r3, [pc, #8]	; (8004204 <puts+0xc>)
 80041fa:	4601      	mov	r1, r0
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	f7ff bf8d 	b.w	800411c <_puts_r>
 8004202:	bf00      	nop
 8004204:	20000014 	.word	0x20000014

08004208 <__swbuf_r>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	460e      	mov	r6, r1
 800420c:	4614      	mov	r4, r2
 800420e:	4605      	mov	r5, r0
 8004210:	b118      	cbz	r0, 800421a <__swbuf_r+0x12>
 8004212:	6983      	ldr	r3, [r0, #24]
 8004214:	b90b      	cbnz	r3, 800421a <__swbuf_r+0x12>
 8004216:	f000 f9d1 	bl	80045bc <__sinit>
 800421a:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <__swbuf_r+0x98>)
 800421c:	429c      	cmp	r4, r3
 800421e:	d12b      	bne.n	8004278 <__swbuf_r+0x70>
 8004220:	686c      	ldr	r4, [r5, #4]
 8004222:	69a3      	ldr	r3, [r4, #24]
 8004224:	60a3      	str	r3, [r4, #8]
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	071a      	lsls	r2, r3, #28
 800422a:	d52f      	bpl.n	800428c <__swbuf_r+0x84>
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	b36b      	cbz	r3, 800428c <__swbuf_r+0x84>
 8004230:	6923      	ldr	r3, [r4, #16]
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	1ac0      	subs	r0, r0, r3
 8004236:	6963      	ldr	r3, [r4, #20]
 8004238:	b2f6      	uxtb	r6, r6
 800423a:	4283      	cmp	r3, r0
 800423c:	4637      	mov	r7, r6
 800423e:	dc04      	bgt.n	800424a <__swbuf_r+0x42>
 8004240:	4621      	mov	r1, r4
 8004242:	4628      	mov	r0, r5
 8004244:	f000 f926 	bl	8004494 <_fflush_r>
 8004248:	bb30      	cbnz	r0, 8004298 <__swbuf_r+0x90>
 800424a:	68a3      	ldr	r3, [r4, #8]
 800424c:	3b01      	subs	r3, #1
 800424e:	60a3      	str	r3, [r4, #8]
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	6022      	str	r2, [r4, #0]
 8004256:	701e      	strb	r6, [r3, #0]
 8004258:	6963      	ldr	r3, [r4, #20]
 800425a:	3001      	adds	r0, #1
 800425c:	4283      	cmp	r3, r0
 800425e:	d004      	beq.n	800426a <__swbuf_r+0x62>
 8004260:	89a3      	ldrh	r3, [r4, #12]
 8004262:	07db      	lsls	r3, r3, #31
 8004264:	d506      	bpl.n	8004274 <__swbuf_r+0x6c>
 8004266:	2e0a      	cmp	r6, #10
 8004268:	d104      	bne.n	8004274 <__swbuf_r+0x6c>
 800426a:	4621      	mov	r1, r4
 800426c:	4628      	mov	r0, r5
 800426e:	f000 f911 	bl	8004494 <_fflush_r>
 8004272:	b988      	cbnz	r0, 8004298 <__swbuf_r+0x90>
 8004274:	4638      	mov	r0, r7
 8004276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004278:	4b0a      	ldr	r3, [pc, #40]	; (80042a4 <__swbuf_r+0x9c>)
 800427a:	429c      	cmp	r4, r3
 800427c:	d101      	bne.n	8004282 <__swbuf_r+0x7a>
 800427e:	68ac      	ldr	r4, [r5, #8]
 8004280:	e7cf      	b.n	8004222 <__swbuf_r+0x1a>
 8004282:	4b09      	ldr	r3, [pc, #36]	; (80042a8 <__swbuf_r+0xa0>)
 8004284:	429c      	cmp	r4, r3
 8004286:	bf08      	it	eq
 8004288:	68ec      	ldreq	r4, [r5, #12]
 800428a:	e7ca      	b.n	8004222 <__swbuf_r+0x1a>
 800428c:	4621      	mov	r1, r4
 800428e:	4628      	mov	r0, r5
 8004290:	f000 f80c 	bl	80042ac <__swsetup_r>
 8004294:	2800      	cmp	r0, #0
 8004296:	d0cb      	beq.n	8004230 <__swbuf_r+0x28>
 8004298:	f04f 37ff 	mov.w	r7, #4294967295
 800429c:	e7ea      	b.n	8004274 <__swbuf_r+0x6c>
 800429e:	bf00      	nop
 80042a0:	08004be0 	.word	0x08004be0
 80042a4:	08004c00 	.word	0x08004c00
 80042a8:	08004bc0 	.word	0x08004bc0

080042ac <__swsetup_r>:
 80042ac:	4b32      	ldr	r3, [pc, #200]	; (8004378 <__swsetup_r+0xcc>)
 80042ae:	b570      	push	{r4, r5, r6, lr}
 80042b0:	681d      	ldr	r5, [r3, #0]
 80042b2:	4606      	mov	r6, r0
 80042b4:	460c      	mov	r4, r1
 80042b6:	b125      	cbz	r5, 80042c2 <__swsetup_r+0x16>
 80042b8:	69ab      	ldr	r3, [r5, #24]
 80042ba:	b913      	cbnz	r3, 80042c2 <__swsetup_r+0x16>
 80042bc:	4628      	mov	r0, r5
 80042be:	f000 f97d 	bl	80045bc <__sinit>
 80042c2:	4b2e      	ldr	r3, [pc, #184]	; (800437c <__swsetup_r+0xd0>)
 80042c4:	429c      	cmp	r4, r3
 80042c6:	d10f      	bne.n	80042e8 <__swsetup_r+0x3c>
 80042c8:	686c      	ldr	r4, [r5, #4]
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042d0:	0719      	lsls	r1, r3, #28
 80042d2:	d42c      	bmi.n	800432e <__swsetup_r+0x82>
 80042d4:	06dd      	lsls	r5, r3, #27
 80042d6:	d411      	bmi.n	80042fc <__swsetup_r+0x50>
 80042d8:	2309      	movs	r3, #9
 80042da:	6033      	str	r3, [r6, #0]
 80042dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	f04f 30ff 	mov.w	r0, #4294967295
 80042e6:	e03e      	b.n	8004366 <__swsetup_r+0xba>
 80042e8:	4b25      	ldr	r3, [pc, #148]	; (8004380 <__swsetup_r+0xd4>)
 80042ea:	429c      	cmp	r4, r3
 80042ec:	d101      	bne.n	80042f2 <__swsetup_r+0x46>
 80042ee:	68ac      	ldr	r4, [r5, #8]
 80042f0:	e7eb      	b.n	80042ca <__swsetup_r+0x1e>
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <__swsetup_r+0xd8>)
 80042f4:	429c      	cmp	r4, r3
 80042f6:	bf08      	it	eq
 80042f8:	68ec      	ldreq	r4, [r5, #12]
 80042fa:	e7e6      	b.n	80042ca <__swsetup_r+0x1e>
 80042fc:	0758      	lsls	r0, r3, #29
 80042fe:	d512      	bpl.n	8004326 <__swsetup_r+0x7a>
 8004300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004302:	b141      	cbz	r1, 8004316 <__swsetup_r+0x6a>
 8004304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004308:	4299      	cmp	r1, r3
 800430a:	d002      	beq.n	8004312 <__swsetup_r+0x66>
 800430c:	4630      	mov	r0, r6
 800430e:	f000 fa5b 	bl	80047c8 <_free_r>
 8004312:	2300      	movs	r3, #0
 8004314:	6363      	str	r3, [r4, #52]	; 0x34
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800431c:	81a3      	strh	r3, [r4, #12]
 800431e:	2300      	movs	r3, #0
 8004320:	6063      	str	r3, [r4, #4]
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	89a3      	ldrh	r3, [r4, #12]
 8004328:	f043 0308 	orr.w	r3, r3, #8
 800432c:	81a3      	strh	r3, [r4, #12]
 800432e:	6923      	ldr	r3, [r4, #16]
 8004330:	b94b      	cbnz	r3, 8004346 <__swsetup_r+0x9a>
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433c:	d003      	beq.n	8004346 <__swsetup_r+0x9a>
 800433e:	4621      	mov	r1, r4
 8004340:	4630      	mov	r0, r6
 8004342:	f000 fa01 	bl	8004748 <__smakebuf_r>
 8004346:	89a0      	ldrh	r0, [r4, #12]
 8004348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800434c:	f010 0301 	ands.w	r3, r0, #1
 8004350:	d00a      	beq.n	8004368 <__swsetup_r+0xbc>
 8004352:	2300      	movs	r3, #0
 8004354:	60a3      	str	r3, [r4, #8]
 8004356:	6963      	ldr	r3, [r4, #20]
 8004358:	425b      	negs	r3, r3
 800435a:	61a3      	str	r3, [r4, #24]
 800435c:	6923      	ldr	r3, [r4, #16]
 800435e:	b943      	cbnz	r3, 8004372 <__swsetup_r+0xc6>
 8004360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004364:	d1ba      	bne.n	80042dc <__swsetup_r+0x30>
 8004366:	bd70      	pop	{r4, r5, r6, pc}
 8004368:	0781      	lsls	r1, r0, #30
 800436a:	bf58      	it	pl
 800436c:	6963      	ldrpl	r3, [r4, #20]
 800436e:	60a3      	str	r3, [r4, #8]
 8004370:	e7f4      	b.n	800435c <__swsetup_r+0xb0>
 8004372:	2000      	movs	r0, #0
 8004374:	e7f7      	b.n	8004366 <__swsetup_r+0xba>
 8004376:	bf00      	nop
 8004378:	20000014 	.word	0x20000014
 800437c:	08004be0 	.word	0x08004be0
 8004380:	08004c00 	.word	0x08004c00
 8004384:	08004bc0 	.word	0x08004bc0

08004388 <__sflush_r>:
 8004388:	898a      	ldrh	r2, [r1, #12]
 800438a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438e:	4605      	mov	r5, r0
 8004390:	0710      	lsls	r0, r2, #28
 8004392:	460c      	mov	r4, r1
 8004394:	d458      	bmi.n	8004448 <__sflush_r+0xc0>
 8004396:	684b      	ldr	r3, [r1, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	dc05      	bgt.n	80043a8 <__sflush_r+0x20>
 800439c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	dc02      	bgt.n	80043a8 <__sflush_r+0x20>
 80043a2:	2000      	movs	r0, #0
 80043a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043aa:	2e00      	cmp	r6, #0
 80043ac:	d0f9      	beq.n	80043a2 <__sflush_r+0x1a>
 80043ae:	2300      	movs	r3, #0
 80043b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043b4:	682f      	ldr	r7, [r5, #0]
 80043b6:	602b      	str	r3, [r5, #0]
 80043b8:	d032      	beq.n	8004420 <__sflush_r+0x98>
 80043ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	075a      	lsls	r2, r3, #29
 80043c0:	d505      	bpl.n	80043ce <__sflush_r+0x46>
 80043c2:	6863      	ldr	r3, [r4, #4]
 80043c4:	1ac0      	subs	r0, r0, r3
 80043c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043c8:	b10b      	cbz	r3, 80043ce <__sflush_r+0x46>
 80043ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043cc:	1ac0      	subs	r0, r0, r3
 80043ce:	2300      	movs	r3, #0
 80043d0:	4602      	mov	r2, r0
 80043d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043d4:	6a21      	ldr	r1, [r4, #32]
 80043d6:	4628      	mov	r0, r5
 80043d8:	47b0      	blx	r6
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	d106      	bne.n	80043ee <__sflush_r+0x66>
 80043e0:	6829      	ldr	r1, [r5, #0]
 80043e2:	291d      	cmp	r1, #29
 80043e4:	d82c      	bhi.n	8004440 <__sflush_r+0xb8>
 80043e6:	4a2a      	ldr	r2, [pc, #168]	; (8004490 <__sflush_r+0x108>)
 80043e8:	40ca      	lsrs	r2, r1
 80043ea:	07d6      	lsls	r6, r2, #31
 80043ec:	d528      	bpl.n	8004440 <__sflush_r+0xb8>
 80043ee:	2200      	movs	r2, #0
 80043f0:	6062      	str	r2, [r4, #4]
 80043f2:	04d9      	lsls	r1, r3, #19
 80043f4:	6922      	ldr	r2, [r4, #16]
 80043f6:	6022      	str	r2, [r4, #0]
 80043f8:	d504      	bpl.n	8004404 <__sflush_r+0x7c>
 80043fa:	1c42      	adds	r2, r0, #1
 80043fc:	d101      	bne.n	8004402 <__sflush_r+0x7a>
 80043fe:	682b      	ldr	r3, [r5, #0]
 8004400:	b903      	cbnz	r3, 8004404 <__sflush_r+0x7c>
 8004402:	6560      	str	r0, [r4, #84]	; 0x54
 8004404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004406:	602f      	str	r7, [r5, #0]
 8004408:	2900      	cmp	r1, #0
 800440a:	d0ca      	beq.n	80043a2 <__sflush_r+0x1a>
 800440c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004410:	4299      	cmp	r1, r3
 8004412:	d002      	beq.n	800441a <__sflush_r+0x92>
 8004414:	4628      	mov	r0, r5
 8004416:	f000 f9d7 	bl	80047c8 <_free_r>
 800441a:	2000      	movs	r0, #0
 800441c:	6360      	str	r0, [r4, #52]	; 0x34
 800441e:	e7c1      	b.n	80043a4 <__sflush_r+0x1c>
 8004420:	6a21      	ldr	r1, [r4, #32]
 8004422:	2301      	movs	r3, #1
 8004424:	4628      	mov	r0, r5
 8004426:	47b0      	blx	r6
 8004428:	1c41      	adds	r1, r0, #1
 800442a:	d1c7      	bne.n	80043bc <__sflush_r+0x34>
 800442c:	682b      	ldr	r3, [r5, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0c4      	beq.n	80043bc <__sflush_r+0x34>
 8004432:	2b1d      	cmp	r3, #29
 8004434:	d001      	beq.n	800443a <__sflush_r+0xb2>
 8004436:	2b16      	cmp	r3, #22
 8004438:	d101      	bne.n	800443e <__sflush_r+0xb6>
 800443a:	602f      	str	r7, [r5, #0]
 800443c:	e7b1      	b.n	80043a2 <__sflush_r+0x1a>
 800443e:	89a3      	ldrh	r3, [r4, #12]
 8004440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	e7ad      	b.n	80043a4 <__sflush_r+0x1c>
 8004448:	690f      	ldr	r7, [r1, #16]
 800444a:	2f00      	cmp	r7, #0
 800444c:	d0a9      	beq.n	80043a2 <__sflush_r+0x1a>
 800444e:	0793      	lsls	r3, r2, #30
 8004450:	680e      	ldr	r6, [r1, #0]
 8004452:	bf08      	it	eq
 8004454:	694b      	ldreq	r3, [r1, #20]
 8004456:	600f      	str	r7, [r1, #0]
 8004458:	bf18      	it	ne
 800445a:	2300      	movne	r3, #0
 800445c:	eba6 0807 	sub.w	r8, r6, r7
 8004460:	608b      	str	r3, [r1, #8]
 8004462:	f1b8 0f00 	cmp.w	r8, #0
 8004466:	dd9c      	ble.n	80043a2 <__sflush_r+0x1a>
 8004468:	6a21      	ldr	r1, [r4, #32]
 800446a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800446c:	4643      	mov	r3, r8
 800446e:	463a      	mov	r2, r7
 8004470:	4628      	mov	r0, r5
 8004472:	47b0      	blx	r6
 8004474:	2800      	cmp	r0, #0
 8004476:	dc06      	bgt.n	8004486 <__sflush_r+0xfe>
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	f04f 30ff 	mov.w	r0, #4294967295
 8004484:	e78e      	b.n	80043a4 <__sflush_r+0x1c>
 8004486:	4407      	add	r7, r0
 8004488:	eba8 0800 	sub.w	r8, r8, r0
 800448c:	e7e9      	b.n	8004462 <__sflush_r+0xda>
 800448e:	bf00      	nop
 8004490:	20400001 	.word	0x20400001

08004494 <_fflush_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	690b      	ldr	r3, [r1, #16]
 8004498:	4605      	mov	r5, r0
 800449a:	460c      	mov	r4, r1
 800449c:	b913      	cbnz	r3, 80044a4 <_fflush_r+0x10>
 800449e:	2500      	movs	r5, #0
 80044a0:	4628      	mov	r0, r5
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	b118      	cbz	r0, 80044ae <_fflush_r+0x1a>
 80044a6:	6983      	ldr	r3, [r0, #24]
 80044a8:	b90b      	cbnz	r3, 80044ae <_fflush_r+0x1a>
 80044aa:	f000 f887 	bl	80045bc <__sinit>
 80044ae:	4b14      	ldr	r3, [pc, #80]	; (8004500 <_fflush_r+0x6c>)
 80044b0:	429c      	cmp	r4, r3
 80044b2:	d11b      	bne.n	80044ec <_fflush_r+0x58>
 80044b4:	686c      	ldr	r4, [r5, #4]
 80044b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0ef      	beq.n	800449e <_fflush_r+0xa>
 80044be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044c0:	07d0      	lsls	r0, r2, #31
 80044c2:	d404      	bmi.n	80044ce <_fflush_r+0x3a>
 80044c4:	0599      	lsls	r1, r3, #22
 80044c6:	d402      	bmi.n	80044ce <_fflush_r+0x3a>
 80044c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044ca:	f000 f915 	bl	80046f8 <__retarget_lock_acquire_recursive>
 80044ce:	4628      	mov	r0, r5
 80044d0:	4621      	mov	r1, r4
 80044d2:	f7ff ff59 	bl	8004388 <__sflush_r>
 80044d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044d8:	07da      	lsls	r2, r3, #31
 80044da:	4605      	mov	r5, r0
 80044dc:	d4e0      	bmi.n	80044a0 <_fflush_r+0xc>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	059b      	lsls	r3, r3, #22
 80044e2:	d4dd      	bmi.n	80044a0 <_fflush_r+0xc>
 80044e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e6:	f000 f908 	bl	80046fa <__retarget_lock_release_recursive>
 80044ea:	e7d9      	b.n	80044a0 <_fflush_r+0xc>
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <_fflush_r+0x70>)
 80044ee:	429c      	cmp	r4, r3
 80044f0:	d101      	bne.n	80044f6 <_fflush_r+0x62>
 80044f2:	68ac      	ldr	r4, [r5, #8]
 80044f4:	e7df      	b.n	80044b6 <_fflush_r+0x22>
 80044f6:	4b04      	ldr	r3, [pc, #16]	; (8004508 <_fflush_r+0x74>)
 80044f8:	429c      	cmp	r4, r3
 80044fa:	bf08      	it	eq
 80044fc:	68ec      	ldreq	r4, [r5, #12]
 80044fe:	e7da      	b.n	80044b6 <_fflush_r+0x22>
 8004500:	08004be0 	.word	0x08004be0
 8004504:	08004c00 	.word	0x08004c00
 8004508:	08004bc0 	.word	0x08004bc0

0800450c <std>:
 800450c:	2300      	movs	r3, #0
 800450e:	b510      	push	{r4, lr}
 8004510:	4604      	mov	r4, r0
 8004512:	e9c0 3300 	strd	r3, r3, [r0]
 8004516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800451a:	6083      	str	r3, [r0, #8]
 800451c:	8181      	strh	r1, [r0, #12]
 800451e:	6643      	str	r3, [r0, #100]	; 0x64
 8004520:	81c2      	strh	r2, [r0, #14]
 8004522:	6183      	str	r3, [r0, #24]
 8004524:	4619      	mov	r1, r3
 8004526:	2208      	movs	r2, #8
 8004528:	305c      	adds	r0, #92	; 0x5c
 800452a:	f7ff fdef 	bl	800410c <memset>
 800452e:	4b05      	ldr	r3, [pc, #20]	; (8004544 <std+0x38>)
 8004530:	6263      	str	r3, [r4, #36]	; 0x24
 8004532:	4b05      	ldr	r3, [pc, #20]	; (8004548 <std+0x3c>)
 8004534:	62a3      	str	r3, [r4, #40]	; 0x28
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <std+0x40>)
 8004538:	62e3      	str	r3, [r4, #44]	; 0x2c
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <std+0x44>)
 800453c:	6224      	str	r4, [r4, #32]
 800453e:	6323      	str	r3, [r4, #48]	; 0x30
 8004540:	bd10      	pop	{r4, pc}
 8004542:	bf00      	nop
 8004544:	080049a9 	.word	0x080049a9
 8004548:	080049cb 	.word	0x080049cb
 800454c:	08004a03 	.word	0x08004a03
 8004550:	08004a27 	.word	0x08004a27

08004554 <_cleanup_r>:
 8004554:	4901      	ldr	r1, [pc, #4]	; (800455c <_cleanup_r+0x8>)
 8004556:	f000 b8af 	b.w	80046b8 <_fwalk_reent>
 800455a:	bf00      	nop
 800455c:	08004495 	.word	0x08004495

08004560 <__sfmoreglue>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	2268      	movs	r2, #104	; 0x68
 8004564:	1e4d      	subs	r5, r1, #1
 8004566:	4355      	muls	r5, r2
 8004568:	460e      	mov	r6, r1
 800456a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800456e:	f000 f997 	bl	80048a0 <_malloc_r>
 8004572:	4604      	mov	r4, r0
 8004574:	b140      	cbz	r0, 8004588 <__sfmoreglue+0x28>
 8004576:	2100      	movs	r1, #0
 8004578:	e9c0 1600 	strd	r1, r6, [r0]
 800457c:	300c      	adds	r0, #12
 800457e:	60a0      	str	r0, [r4, #8]
 8004580:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004584:	f7ff fdc2 	bl	800410c <memset>
 8004588:	4620      	mov	r0, r4
 800458a:	bd70      	pop	{r4, r5, r6, pc}

0800458c <__sfp_lock_acquire>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__sfp_lock_acquire+0x8>)
 800458e:	f000 b8b3 	b.w	80046f8 <__retarget_lock_acquire_recursive>
 8004592:	bf00      	nop
 8004594:	20006a89 	.word	0x20006a89

08004598 <__sfp_lock_release>:
 8004598:	4801      	ldr	r0, [pc, #4]	; (80045a0 <__sfp_lock_release+0x8>)
 800459a:	f000 b8ae 	b.w	80046fa <__retarget_lock_release_recursive>
 800459e:	bf00      	nop
 80045a0:	20006a89 	.word	0x20006a89

080045a4 <__sinit_lock_acquire>:
 80045a4:	4801      	ldr	r0, [pc, #4]	; (80045ac <__sinit_lock_acquire+0x8>)
 80045a6:	f000 b8a7 	b.w	80046f8 <__retarget_lock_acquire_recursive>
 80045aa:	bf00      	nop
 80045ac:	20006a8a 	.word	0x20006a8a

080045b0 <__sinit_lock_release>:
 80045b0:	4801      	ldr	r0, [pc, #4]	; (80045b8 <__sinit_lock_release+0x8>)
 80045b2:	f000 b8a2 	b.w	80046fa <__retarget_lock_release_recursive>
 80045b6:	bf00      	nop
 80045b8:	20006a8a 	.word	0x20006a8a

080045bc <__sinit>:
 80045bc:	b510      	push	{r4, lr}
 80045be:	4604      	mov	r4, r0
 80045c0:	f7ff fff0 	bl	80045a4 <__sinit_lock_acquire>
 80045c4:	69a3      	ldr	r3, [r4, #24]
 80045c6:	b11b      	cbz	r3, 80045d0 <__sinit+0x14>
 80045c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045cc:	f7ff bff0 	b.w	80045b0 <__sinit_lock_release>
 80045d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80045d4:	6523      	str	r3, [r4, #80]	; 0x50
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <__sinit+0x68>)
 80045d8:	4a13      	ldr	r2, [pc, #76]	; (8004628 <__sinit+0x6c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80045de:	42a3      	cmp	r3, r4
 80045e0:	bf04      	itt	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	61a3      	streq	r3, [r4, #24]
 80045e6:	4620      	mov	r0, r4
 80045e8:	f000 f820 	bl	800462c <__sfp>
 80045ec:	6060      	str	r0, [r4, #4]
 80045ee:	4620      	mov	r0, r4
 80045f0:	f000 f81c 	bl	800462c <__sfp>
 80045f4:	60a0      	str	r0, [r4, #8]
 80045f6:	4620      	mov	r0, r4
 80045f8:	f000 f818 	bl	800462c <__sfp>
 80045fc:	2200      	movs	r2, #0
 80045fe:	60e0      	str	r0, [r4, #12]
 8004600:	2104      	movs	r1, #4
 8004602:	6860      	ldr	r0, [r4, #4]
 8004604:	f7ff ff82 	bl	800450c <std>
 8004608:	68a0      	ldr	r0, [r4, #8]
 800460a:	2201      	movs	r2, #1
 800460c:	2109      	movs	r1, #9
 800460e:	f7ff ff7d 	bl	800450c <std>
 8004612:	68e0      	ldr	r0, [r4, #12]
 8004614:	2202      	movs	r2, #2
 8004616:	2112      	movs	r1, #18
 8004618:	f7ff ff78 	bl	800450c <std>
 800461c:	2301      	movs	r3, #1
 800461e:	61a3      	str	r3, [r4, #24]
 8004620:	e7d2      	b.n	80045c8 <__sinit+0xc>
 8004622:	bf00      	nop
 8004624:	08004bbc 	.word	0x08004bbc
 8004628:	08004555 	.word	0x08004555

0800462c <__sfp>:
 800462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462e:	4607      	mov	r7, r0
 8004630:	f7ff ffac 	bl	800458c <__sfp_lock_acquire>
 8004634:	4b1e      	ldr	r3, [pc, #120]	; (80046b0 <__sfp+0x84>)
 8004636:	681e      	ldr	r6, [r3, #0]
 8004638:	69b3      	ldr	r3, [r6, #24]
 800463a:	b913      	cbnz	r3, 8004642 <__sfp+0x16>
 800463c:	4630      	mov	r0, r6
 800463e:	f7ff ffbd 	bl	80045bc <__sinit>
 8004642:	3648      	adds	r6, #72	; 0x48
 8004644:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004648:	3b01      	subs	r3, #1
 800464a:	d503      	bpl.n	8004654 <__sfp+0x28>
 800464c:	6833      	ldr	r3, [r6, #0]
 800464e:	b30b      	cbz	r3, 8004694 <__sfp+0x68>
 8004650:	6836      	ldr	r6, [r6, #0]
 8004652:	e7f7      	b.n	8004644 <__sfp+0x18>
 8004654:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004658:	b9d5      	cbnz	r5, 8004690 <__sfp+0x64>
 800465a:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <__sfp+0x88>)
 800465c:	60e3      	str	r3, [r4, #12]
 800465e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004662:	6665      	str	r5, [r4, #100]	; 0x64
 8004664:	f000 f847 	bl	80046f6 <__retarget_lock_init_recursive>
 8004668:	f7ff ff96 	bl	8004598 <__sfp_lock_release>
 800466c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004670:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004674:	6025      	str	r5, [r4, #0]
 8004676:	61a5      	str	r5, [r4, #24]
 8004678:	2208      	movs	r2, #8
 800467a:	4629      	mov	r1, r5
 800467c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004680:	f7ff fd44 	bl	800410c <memset>
 8004684:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004688:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800468c:	4620      	mov	r0, r4
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004690:	3468      	adds	r4, #104	; 0x68
 8004692:	e7d9      	b.n	8004648 <__sfp+0x1c>
 8004694:	2104      	movs	r1, #4
 8004696:	4638      	mov	r0, r7
 8004698:	f7ff ff62 	bl	8004560 <__sfmoreglue>
 800469c:	4604      	mov	r4, r0
 800469e:	6030      	str	r0, [r6, #0]
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d1d5      	bne.n	8004650 <__sfp+0x24>
 80046a4:	f7ff ff78 	bl	8004598 <__sfp_lock_release>
 80046a8:	230c      	movs	r3, #12
 80046aa:	603b      	str	r3, [r7, #0]
 80046ac:	e7ee      	b.n	800468c <__sfp+0x60>
 80046ae:	bf00      	nop
 80046b0:	08004bbc 	.word	0x08004bbc
 80046b4:	ffff0001 	.word	0xffff0001

080046b8 <_fwalk_reent>:
 80046b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046bc:	4606      	mov	r6, r0
 80046be:	4688      	mov	r8, r1
 80046c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046c4:	2700      	movs	r7, #0
 80046c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046ca:	f1b9 0901 	subs.w	r9, r9, #1
 80046ce:	d505      	bpl.n	80046dc <_fwalk_reent+0x24>
 80046d0:	6824      	ldr	r4, [r4, #0]
 80046d2:	2c00      	cmp	r4, #0
 80046d4:	d1f7      	bne.n	80046c6 <_fwalk_reent+0xe>
 80046d6:	4638      	mov	r0, r7
 80046d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046dc:	89ab      	ldrh	r3, [r5, #12]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d907      	bls.n	80046f2 <_fwalk_reent+0x3a>
 80046e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046e6:	3301      	adds	r3, #1
 80046e8:	d003      	beq.n	80046f2 <_fwalk_reent+0x3a>
 80046ea:	4629      	mov	r1, r5
 80046ec:	4630      	mov	r0, r6
 80046ee:	47c0      	blx	r8
 80046f0:	4307      	orrs	r7, r0
 80046f2:	3568      	adds	r5, #104	; 0x68
 80046f4:	e7e9      	b.n	80046ca <_fwalk_reent+0x12>

080046f6 <__retarget_lock_init_recursive>:
 80046f6:	4770      	bx	lr

080046f8 <__retarget_lock_acquire_recursive>:
 80046f8:	4770      	bx	lr

080046fa <__retarget_lock_release_recursive>:
 80046fa:	4770      	bx	lr

080046fc <__swhatbuf_r>:
 80046fc:	b570      	push	{r4, r5, r6, lr}
 80046fe:	460e      	mov	r6, r1
 8004700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004704:	2900      	cmp	r1, #0
 8004706:	b096      	sub	sp, #88	; 0x58
 8004708:	4614      	mov	r4, r2
 800470a:	461d      	mov	r5, r3
 800470c:	da08      	bge.n	8004720 <__swhatbuf_r+0x24>
 800470e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	602a      	str	r2, [r5, #0]
 8004716:	061a      	lsls	r2, r3, #24
 8004718:	d410      	bmi.n	800473c <__swhatbuf_r+0x40>
 800471a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471e:	e00e      	b.n	800473e <__swhatbuf_r+0x42>
 8004720:	466a      	mov	r2, sp
 8004722:	f000 f9a7 	bl	8004a74 <_fstat_r>
 8004726:	2800      	cmp	r0, #0
 8004728:	dbf1      	blt.n	800470e <__swhatbuf_r+0x12>
 800472a:	9a01      	ldr	r2, [sp, #4]
 800472c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004730:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004734:	425a      	negs	r2, r3
 8004736:	415a      	adcs	r2, r3
 8004738:	602a      	str	r2, [r5, #0]
 800473a:	e7ee      	b.n	800471a <__swhatbuf_r+0x1e>
 800473c:	2340      	movs	r3, #64	; 0x40
 800473e:	2000      	movs	r0, #0
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	b016      	add	sp, #88	; 0x58
 8004744:	bd70      	pop	{r4, r5, r6, pc}
	...

08004748 <__smakebuf_r>:
 8004748:	898b      	ldrh	r3, [r1, #12]
 800474a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800474c:	079d      	lsls	r5, r3, #30
 800474e:	4606      	mov	r6, r0
 8004750:	460c      	mov	r4, r1
 8004752:	d507      	bpl.n	8004764 <__smakebuf_r+0x1c>
 8004754:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	2301      	movs	r3, #1
 800475e:	6163      	str	r3, [r4, #20]
 8004760:	b002      	add	sp, #8
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	ab01      	add	r3, sp, #4
 8004766:	466a      	mov	r2, sp
 8004768:	f7ff ffc8 	bl	80046fc <__swhatbuf_r>
 800476c:	9900      	ldr	r1, [sp, #0]
 800476e:	4605      	mov	r5, r0
 8004770:	4630      	mov	r0, r6
 8004772:	f000 f895 	bl	80048a0 <_malloc_r>
 8004776:	b948      	cbnz	r0, 800478c <__smakebuf_r+0x44>
 8004778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800477c:	059a      	lsls	r2, r3, #22
 800477e:	d4ef      	bmi.n	8004760 <__smakebuf_r+0x18>
 8004780:	f023 0303 	bic.w	r3, r3, #3
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	81a3      	strh	r3, [r4, #12]
 800478a:	e7e3      	b.n	8004754 <__smakebuf_r+0xc>
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <__smakebuf_r+0x7c>)
 800478e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	6020      	str	r0, [r4, #0]
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	81a3      	strh	r3, [r4, #12]
 800479a:	9b00      	ldr	r3, [sp, #0]
 800479c:	6163      	str	r3, [r4, #20]
 800479e:	9b01      	ldr	r3, [sp, #4]
 80047a0:	6120      	str	r0, [r4, #16]
 80047a2:	b15b      	cbz	r3, 80047bc <__smakebuf_r+0x74>
 80047a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047a8:	4630      	mov	r0, r6
 80047aa:	f000 f975 	bl	8004a98 <_isatty_r>
 80047ae:	b128      	cbz	r0, 80047bc <__smakebuf_r+0x74>
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	89a0      	ldrh	r0, [r4, #12]
 80047be:	4305      	orrs	r5, r0
 80047c0:	81a5      	strh	r5, [r4, #12]
 80047c2:	e7cd      	b.n	8004760 <__smakebuf_r+0x18>
 80047c4:	08004555 	.word	0x08004555

080047c8 <_free_r>:
 80047c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ca:	2900      	cmp	r1, #0
 80047cc:	d044      	beq.n	8004858 <_free_r+0x90>
 80047ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047d2:	9001      	str	r0, [sp, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f1a1 0404 	sub.w	r4, r1, #4
 80047da:	bfb8      	it	lt
 80047dc:	18e4      	addlt	r4, r4, r3
 80047de:	f000 f97d 	bl	8004adc <__malloc_lock>
 80047e2:	4a1e      	ldr	r2, [pc, #120]	; (800485c <_free_r+0x94>)
 80047e4:	9801      	ldr	r0, [sp, #4]
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	b933      	cbnz	r3, 80047f8 <_free_r+0x30>
 80047ea:	6063      	str	r3, [r4, #4]
 80047ec:	6014      	str	r4, [r2, #0]
 80047ee:	b003      	add	sp, #12
 80047f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047f4:	f000 b978 	b.w	8004ae8 <__malloc_unlock>
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	d908      	bls.n	800480e <_free_r+0x46>
 80047fc:	6825      	ldr	r5, [r4, #0]
 80047fe:	1961      	adds	r1, r4, r5
 8004800:	428b      	cmp	r3, r1
 8004802:	bf01      	itttt	eq
 8004804:	6819      	ldreq	r1, [r3, #0]
 8004806:	685b      	ldreq	r3, [r3, #4]
 8004808:	1949      	addeq	r1, r1, r5
 800480a:	6021      	streq	r1, [r4, #0]
 800480c:	e7ed      	b.n	80047ea <_free_r+0x22>
 800480e:	461a      	mov	r2, r3
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b10b      	cbz	r3, 8004818 <_free_r+0x50>
 8004814:	42a3      	cmp	r3, r4
 8004816:	d9fa      	bls.n	800480e <_free_r+0x46>
 8004818:	6811      	ldr	r1, [r2, #0]
 800481a:	1855      	adds	r5, r2, r1
 800481c:	42a5      	cmp	r5, r4
 800481e:	d10b      	bne.n	8004838 <_free_r+0x70>
 8004820:	6824      	ldr	r4, [r4, #0]
 8004822:	4421      	add	r1, r4
 8004824:	1854      	adds	r4, r2, r1
 8004826:	42a3      	cmp	r3, r4
 8004828:	6011      	str	r1, [r2, #0]
 800482a:	d1e0      	bne.n	80047ee <_free_r+0x26>
 800482c:	681c      	ldr	r4, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	6053      	str	r3, [r2, #4]
 8004832:	4421      	add	r1, r4
 8004834:	6011      	str	r1, [r2, #0]
 8004836:	e7da      	b.n	80047ee <_free_r+0x26>
 8004838:	d902      	bls.n	8004840 <_free_r+0x78>
 800483a:	230c      	movs	r3, #12
 800483c:	6003      	str	r3, [r0, #0]
 800483e:	e7d6      	b.n	80047ee <_free_r+0x26>
 8004840:	6825      	ldr	r5, [r4, #0]
 8004842:	1961      	adds	r1, r4, r5
 8004844:	428b      	cmp	r3, r1
 8004846:	bf04      	itt	eq
 8004848:	6819      	ldreq	r1, [r3, #0]
 800484a:	685b      	ldreq	r3, [r3, #4]
 800484c:	6063      	str	r3, [r4, #4]
 800484e:	bf04      	itt	eq
 8004850:	1949      	addeq	r1, r1, r5
 8004852:	6021      	streq	r1, [r4, #0]
 8004854:	6054      	str	r4, [r2, #4]
 8004856:	e7ca      	b.n	80047ee <_free_r+0x26>
 8004858:	b003      	add	sp, #12
 800485a:	bd30      	pop	{r4, r5, pc}
 800485c:	20006a8c 	.word	0x20006a8c

08004860 <sbrk_aligned>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	4e0e      	ldr	r6, [pc, #56]	; (800489c <sbrk_aligned+0x3c>)
 8004864:	460c      	mov	r4, r1
 8004866:	6831      	ldr	r1, [r6, #0]
 8004868:	4605      	mov	r5, r0
 800486a:	b911      	cbnz	r1, 8004872 <sbrk_aligned+0x12>
 800486c:	f000 f88c 	bl	8004988 <_sbrk_r>
 8004870:	6030      	str	r0, [r6, #0]
 8004872:	4621      	mov	r1, r4
 8004874:	4628      	mov	r0, r5
 8004876:	f000 f887 	bl	8004988 <_sbrk_r>
 800487a:	1c43      	adds	r3, r0, #1
 800487c:	d00a      	beq.n	8004894 <sbrk_aligned+0x34>
 800487e:	1cc4      	adds	r4, r0, #3
 8004880:	f024 0403 	bic.w	r4, r4, #3
 8004884:	42a0      	cmp	r0, r4
 8004886:	d007      	beq.n	8004898 <sbrk_aligned+0x38>
 8004888:	1a21      	subs	r1, r4, r0
 800488a:	4628      	mov	r0, r5
 800488c:	f000 f87c 	bl	8004988 <_sbrk_r>
 8004890:	3001      	adds	r0, #1
 8004892:	d101      	bne.n	8004898 <sbrk_aligned+0x38>
 8004894:	f04f 34ff 	mov.w	r4, #4294967295
 8004898:	4620      	mov	r0, r4
 800489a:	bd70      	pop	{r4, r5, r6, pc}
 800489c:	20006a90 	.word	0x20006a90

080048a0 <_malloc_r>:
 80048a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a4:	1ccd      	adds	r5, r1, #3
 80048a6:	f025 0503 	bic.w	r5, r5, #3
 80048aa:	3508      	adds	r5, #8
 80048ac:	2d0c      	cmp	r5, #12
 80048ae:	bf38      	it	cc
 80048b0:	250c      	movcc	r5, #12
 80048b2:	2d00      	cmp	r5, #0
 80048b4:	4607      	mov	r7, r0
 80048b6:	db01      	blt.n	80048bc <_malloc_r+0x1c>
 80048b8:	42a9      	cmp	r1, r5
 80048ba:	d905      	bls.n	80048c8 <_malloc_r+0x28>
 80048bc:	230c      	movs	r3, #12
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	2600      	movs	r6, #0
 80048c2:	4630      	mov	r0, r6
 80048c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048c8:	4e2e      	ldr	r6, [pc, #184]	; (8004984 <_malloc_r+0xe4>)
 80048ca:	f000 f907 	bl	8004adc <__malloc_lock>
 80048ce:	6833      	ldr	r3, [r6, #0]
 80048d0:	461c      	mov	r4, r3
 80048d2:	bb34      	cbnz	r4, 8004922 <_malloc_r+0x82>
 80048d4:	4629      	mov	r1, r5
 80048d6:	4638      	mov	r0, r7
 80048d8:	f7ff ffc2 	bl	8004860 <sbrk_aligned>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	4604      	mov	r4, r0
 80048e0:	d14d      	bne.n	800497e <_malloc_r+0xde>
 80048e2:	6834      	ldr	r4, [r6, #0]
 80048e4:	4626      	mov	r6, r4
 80048e6:	2e00      	cmp	r6, #0
 80048e8:	d140      	bne.n	800496c <_malloc_r+0xcc>
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	4631      	mov	r1, r6
 80048ee:	4638      	mov	r0, r7
 80048f0:	eb04 0803 	add.w	r8, r4, r3
 80048f4:	f000 f848 	bl	8004988 <_sbrk_r>
 80048f8:	4580      	cmp	r8, r0
 80048fa:	d13a      	bne.n	8004972 <_malloc_r+0xd2>
 80048fc:	6821      	ldr	r1, [r4, #0]
 80048fe:	3503      	adds	r5, #3
 8004900:	1a6d      	subs	r5, r5, r1
 8004902:	f025 0503 	bic.w	r5, r5, #3
 8004906:	3508      	adds	r5, #8
 8004908:	2d0c      	cmp	r5, #12
 800490a:	bf38      	it	cc
 800490c:	250c      	movcc	r5, #12
 800490e:	4629      	mov	r1, r5
 8004910:	4638      	mov	r0, r7
 8004912:	f7ff ffa5 	bl	8004860 <sbrk_aligned>
 8004916:	3001      	adds	r0, #1
 8004918:	d02b      	beq.n	8004972 <_malloc_r+0xd2>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	442b      	add	r3, r5
 800491e:	6023      	str	r3, [r4, #0]
 8004920:	e00e      	b.n	8004940 <_malloc_r+0xa0>
 8004922:	6822      	ldr	r2, [r4, #0]
 8004924:	1b52      	subs	r2, r2, r5
 8004926:	d41e      	bmi.n	8004966 <_malloc_r+0xc6>
 8004928:	2a0b      	cmp	r2, #11
 800492a:	d916      	bls.n	800495a <_malloc_r+0xba>
 800492c:	1961      	adds	r1, r4, r5
 800492e:	42a3      	cmp	r3, r4
 8004930:	6025      	str	r5, [r4, #0]
 8004932:	bf18      	it	ne
 8004934:	6059      	strne	r1, [r3, #4]
 8004936:	6863      	ldr	r3, [r4, #4]
 8004938:	bf08      	it	eq
 800493a:	6031      	streq	r1, [r6, #0]
 800493c:	5162      	str	r2, [r4, r5]
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	4638      	mov	r0, r7
 8004942:	f104 060b 	add.w	r6, r4, #11
 8004946:	f000 f8cf 	bl	8004ae8 <__malloc_unlock>
 800494a:	f026 0607 	bic.w	r6, r6, #7
 800494e:	1d23      	adds	r3, r4, #4
 8004950:	1af2      	subs	r2, r6, r3
 8004952:	d0b6      	beq.n	80048c2 <_malloc_r+0x22>
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	50a3      	str	r3, [r4, r2]
 8004958:	e7b3      	b.n	80048c2 <_malloc_r+0x22>
 800495a:	6862      	ldr	r2, [r4, #4]
 800495c:	42a3      	cmp	r3, r4
 800495e:	bf0c      	ite	eq
 8004960:	6032      	streq	r2, [r6, #0]
 8004962:	605a      	strne	r2, [r3, #4]
 8004964:	e7ec      	b.n	8004940 <_malloc_r+0xa0>
 8004966:	4623      	mov	r3, r4
 8004968:	6864      	ldr	r4, [r4, #4]
 800496a:	e7b2      	b.n	80048d2 <_malloc_r+0x32>
 800496c:	4634      	mov	r4, r6
 800496e:	6876      	ldr	r6, [r6, #4]
 8004970:	e7b9      	b.n	80048e6 <_malloc_r+0x46>
 8004972:	230c      	movs	r3, #12
 8004974:	603b      	str	r3, [r7, #0]
 8004976:	4638      	mov	r0, r7
 8004978:	f000 f8b6 	bl	8004ae8 <__malloc_unlock>
 800497c:	e7a1      	b.n	80048c2 <_malloc_r+0x22>
 800497e:	6025      	str	r5, [r4, #0]
 8004980:	e7de      	b.n	8004940 <_malloc_r+0xa0>
 8004982:	bf00      	nop
 8004984:	20006a8c 	.word	0x20006a8c

08004988 <_sbrk_r>:
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4d06      	ldr	r5, [pc, #24]	; (80049a4 <_sbrk_r+0x1c>)
 800498c:	2300      	movs	r3, #0
 800498e:	4604      	mov	r4, r0
 8004990:	4608      	mov	r0, r1
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	f000 f8c0 	bl	8004b18 <_sbrk>
 8004998:	1c43      	adds	r3, r0, #1
 800499a:	d102      	bne.n	80049a2 <_sbrk_r+0x1a>
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	b103      	cbz	r3, 80049a2 <_sbrk_r+0x1a>
 80049a0:	6023      	str	r3, [r4, #0]
 80049a2:	bd38      	pop	{r3, r4, r5, pc}
 80049a4:	20006a94 	.word	0x20006a94

080049a8 <__sread>:
 80049a8:	b510      	push	{r4, lr}
 80049aa:	460c      	mov	r4, r1
 80049ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049b0:	f000 f8a0 	bl	8004af4 <_read_r>
 80049b4:	2800      	cmp	r0, #0
 80049b6:	bfab      	itete	ge
 80049b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80049ba:	89a3      	ldrhlt	r3, [r4, #12]
 80049bc:	181b      	addge	r3, r3, r0
 80049be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80049c2:	bfac      	ite	ge
 80049c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80049c6:	81a3      	strhlt	r3, [r4, #12]
 80049c8:	bd10      	pop	{r4, pc}

080049ca <__swrite>:
 80049ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ce:	461f      	mov	r7, r3
 80049d0:	898b      	ldrh	r3, [r1, #12]
 80049d2:	05db      	lsls	r3, r3, #23
 80049d4:	4605      	mov	r5, r0
 80049d6:	460c      	mov	r4, r1
 80049d8:	4616      	mov	r6, r2
 80049da:	d505      	bpl.n	80049e8 <__swrite+0x1e>
 80049dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049e0:	2302      	movs	r3, #2
 80049e2:	2200      	movs	r2, #0
 80049e4:	f000 f868 	bl	8004ab8 <_lseek_r>
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f2:	81a3      	strh	r3, [r4, #12]
 80049f4:	4632      	mov	r2, r6
 80049f6:	463b      	mov	r3, r7
 80049f8:	4628      	mov	r0, r5
 80049fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049fe:	f000 b817 	b.w	8004a30 <_write_r>

08004a02 <__sseek>:
 8004a02:	b510      	push	{r4, lr}
 8004a04:	460c      	mov	r4, r1
 8004a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0a:	f000 f855 	bl	8004ab8 <_lseek_r>
 8004a0e:	1c43      	adds	r3, r0, #1
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	bf15      	itete	ne
 8004a14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a1e:	81a3      	strheq	r3, [r4, #12]
 8004a20:	bf18      	it	ne
 8004a22:	81a3      	strhne	r3, [r4, #12]
 8004a24:	bd10      	pop	{r4, pc}

08004a26 <__sclose>:
 8004a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2a:	f000 b813 	b.w	8004a54 <_close_r>
	...

08004a30 <_write_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4d07      	ldr	r5, [pc, #28]	; (8004a50 <_write_r+0x20>)
 8004a34:	4604      	mov	r4, r0
 8004a36:	4608      	mov	r0, r1
 8004a38:	4611      	mov	r1, r2
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	602a      	str	r2, [r5, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f7fb ffc1 	bl	80009c6 <_write>
 8004a44:	1c43      	adds	r3, r0, #1
 8004a46:	d102      	bne.n	8004a4e <_write_r+0x1e>
 8004a48:	682b      	ldr	r3, [r5, #0]
 8004a4a:	b103      	cbz	r3, 8004a4e <_write_r+0x1e>
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}
 8004a50:	20006a94 	.word	0x20006a94

08004a54 <_close_r>:
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	4d06      	ldr	r5, [pc, #24]	; (8004a70 <_close_r+0x1c>)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	f7fb ffcd 	bl	80009fe <_close>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_close_r+0x1a>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_close_r+0x1a>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	20006a94 	.word	0x20006a94

08004a74 <_fstat_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	; (8004a94 <_fstat_r+0x20>)
 8004a78:	2300      	movs	r3, #0
 8004a7a:	4604      	mov	r4, r0
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	f7fb ffc8 	bl	8000a16 <_fstat>
 8004a86:	1c43      	adds	r3, r0, #1
 8004a88:	d102      	bne.n	8004a90 <_fstat_r+0x1c>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	b103      	cbz	r3, 8004a90 <_fstat_r+0x1c>
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
 8004a92:	bf00      	nop
 8004a94:	20006a94 	.word	0x20006a94

08004a98 <_isatty_r>:
 8004a98:	b538      	push	{r3, r4, r5, lr}
 8004a9a:	4d06      	ldr	r5, [pc, #24]	; (8004ab4 <_isatty_r+0x1c>)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	f7fb ffc7 	bl	8000a36 <_isatty>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d102      	bne.n	8004ab2 <_isatty_r+0x1a>
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	b103      	cbz	r3, 8004ab2 <_isatty_r+0x1a>
 8004ab0:	6023      	str	r3, [r4, #0]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20006a94 	.word	0x20006a94

08004ab8 <_lseek_r>:
 8004ab8:	b538      	push	{r3, r4, r5, lr}
 8004aba:	4d07      	ldr	r5, [pc, #28]	; (8004ad8 <_lseek_r+0x20>)
 8004abc:	4604      	mov	r4, r0
 8004abe:	4608      	mov	r0, r1
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	602a      	str	r2, [r5, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f7fb ffc0 	bl	8000a4c <_lseek>
 8004acc:	1c43      	adds	r3, r0, #1
 8004ace:	d102      	bne.n	8004ad6 <_lseek_r+0x1e>
 8004ad0:	682b      	ldr	r3, [r5, #0]
 8004ad2:	b103      	cbz	r3, 8004ad6 <_lseek_r+0x1e>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	bd38      	pop	{r3, r4, r5, pc}
 8004ad8:	20006a94 	.word	0x20006a94

08004adc <__malloc_lock>:
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <__malloc_lock+0x8>)
 8004ade:	f7ff be0b 	b.w	80046f8 <__retarget_lock_acquire_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	20006a88 	.word	0x20006a88

08004ae8 <__malloc_unlock>:
 8004ae8:	4801      	ldr	r0, [pc, #4]	; (8004af0 <__malloc_unlock+0x8>)
 8004aea:	f7ff be06 	b.w	80046fa <__retarget_lock_release_recursive>
 8004aee:	bf00      	nop
 8004af0:	20006a88 	.word	0x20006a88

08004af4 <_read_r>:
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4d07      	ldr	r5, [pc, #28]	; (8004b14 <_read_r+0x20>)
 8004af8:	4604      	mov	r4, r0
 8004afa:	4608      	mov	r0, r1
 8004afc:	4611      	mov	r1, r2
 8004afe:	2200      	movs	r2, #0
 8004b00:	602a      	str	r2, [r5, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f7fb ff42 	bl	800098c <_read>
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	d102      	bne.n	8004b12 <_read_r+0x1e>
 8004b0c:	682b      	ldr	r3, [r5, #0]
 8004b0e:	b103      	cbz	r3, 8004b12 <_read_r+0x1e>
 8004b10:	6023      	str	r3, [r4, #0]
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	20006a94 	.word	0x20006a94

08004b18 <_sbrk>:
 8004b18:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <_sbrk+0x14>)
 8004b1a:	6811      	ldr	r1, [r2, #0]
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	b909      	cbnz	r1, 8004b24 <_sbrk+0xc>
 8004b20:	4903      	ldr	r1, [pc, #12]	; (8004b30 <_sbrk+0x18>)
 8004b22:	6011      	str	r1, [r2, #0]
 8004b24:	6810      	ldr	r0, [r2, #0]
 8004b26:	4403      	add	r3, r0
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4770      	bx	lr
 8004b2c:	20006a98 	.word	0x20006a98
 8004b30:	20006aa0 	.word	0x20006aa0

08004b34 <_init>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	bf00      	nop
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr

08004b40 <_fini>:
 8004b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b42:	bf00      	nop
 8004b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b46:	bc08      	pop	{r3}
 8004b48:	469e      	mov	lr, r3
 8004b4a:	4770      	bx	lr
